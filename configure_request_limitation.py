#!/usr/bin/env python3
"""
Configuration de la limitation des requ√™tes pour les utilisateurs particuliers
"""

import os
import sys
from datetime import datetime, timedelta
import json

def create_limitation_middleware():
    """Cr√©er un middleware pour limiter les requ√™tes"""
    middleware_code = '''
import time
from datetime import datetime, timedelta
from fastapi import HTTPException, Request
from typing import Dict, Optional
import json

# Stockage en m√©moire des requ√™tes (en production, utilisez Redis)
request_counts: Dict[str, Dict] = {}

def check_request_limit(user_id: str, plan_type: str, request_limit: int) -> bool:
    """
    V√©rifie si l'utilisateur peut faire une nouvelle requ√™te
    
    Args:
        user_id: ID de l'utilisateur
        plan_type: Type de plan ('particulier' ou 'professionnel')
        request_limit: Limite de requ√™tes (-1 pour illimit√©)
    
    Returns:
        bool: True si la requ√™te est autoris√©e
    """
    if plan_type == 'professionnel' or request_limit == -1:
        return True  # Pas de limitation pour les professionnels
    
    now = datetime.now()
    current_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    if user_id not in request_counts:
        request_counts[user_id] = {
            'count': 0,
            'reset_date': current_month
        }
    
    user_data = request_counts[user_id]
    
    # R√©initialiser le compteur si on est dans un nouveau mois
    if now >= user_data['reset_date'] + timedelta(days=32):
        user_data['count'] = 0
        user_data['reset_date'] = current_month
    
    # V√©rifier la limite
    if user_data['count'] >= request_limit:
        return False
    
    # Incr√©menter le compteur
    user_data['count'] += 1
    return True

def get_remaining_requests(user_id: str) -> int:
    """
    Retourne le nombre de requ√™tes restantes pour l'utilisateur
    
    Args:
        user_id: ID de l'utilisateur
    
    Returns:
        int: Nombre de requ√™tes restantes (-1 pour illimit√©)
    """
    if user_id not in request_counts:
        return 30  # Limite par d√©faut pour les particuliers
    
    user_data = request_counts[user_id]
    now = datetime.now()
    current_month = now.replace(day=1, hour=0, minute=0, second=0, microsecond=0)
    
    # R√©initialiser si nouveau mois
    if now >= user_data['reset_date'] + timedelta(days=32):
        return 30
    
    return max(0, 30 - user_data['count'])

async def request_limitation_middleware(request: Request, call_next):
    """
    Middleware pour limiter les requ√™tes selon le plan utilisateur
    """
    # V√©rifier si c'est une requ√™te vers l'API Francis
    if request.url.path.startswith("/api/francis") or request.url.path.startswith("/api/assistant"):
        # R√©cup√©rer l'utilisateur depuis le token (√† adapter selon votre auth)
        user_id = request.headers.get("X-User-ID")
        
        if user_id:
            # R√©cup√©rer le plan utilisateur depuis la base de donn√©es
            # Ici vous devrez adapter selon votre syst√®me d'authentification
            plan_type = "particulier"  # √Ä r√©cup√©rer depuis la DB
            request_limit = 30  # √Ä r√©cup√©rer depuis la DB
            
            if not check_request_limit(user_id, plan_type, request_limit):
                remaining = get_remaining_requests(user_id)
                raise HTTPException(
                    status_code=429,
                    detail={
                        "error": "Limite de requ√™tes atteinte",
                        "message": f"Vous avez atteint votre limite de {request_limit} requ√™tes ce mois-ci.",
                        "remaining_requests": remaining,
                        "reset_date": (datetime.now().replace(day=1) + timedelta(days=32)).isoformat()
                    }
                )
    
    response = await call_next(request)
    return response
'''
    
    return middleware_code

def create_database_functions():
    """Cr√©er les fonctions SQL pour g√©rer les limites"""
    sql_functions = '''
-- Fonction pour v√©rifier les limites de requ√™tes
CREATE OR REPLACE FUNCTION check_user_request_limit(
    p_user_id UUID,
    p_plan_type TEXT DEFAULT 'particulier'
) RETURNS BOOLEAN AS $$
DECLARE
    current_count INTEGER;
    request_limit INTEGER;
    current_month DATE;
BEGIN
    -- D√©terminer la limite selon le plan
    IF p_plan_type = 'professionnel' THEN
        request_limit := -1; -- Illimit√©
    ELSE
        request_limit := 30; -- Particulier
    END IF;
    
    -- Si illimit√©, autoriser
    IF request_limit = -1 THEN
        RETURN TRUE;
    END IF;
    
    -- Obtenir le mois actuel
    current_month := DATE_TRUNC('month', CURRENT_DATE);
    
    -- Compter les requ√™tes du mois actuel
    SELECT COALESCE(COUNT(*), 0)
    INTO current_count
    FROM user_requests
    WHERE user_id = p_user_id
    AND created_at >= current_month;
    
    -- V√©rifier la limite
    RETURN current_count < request_limit;
END;
$$ LANGUAGE plpgsql;

-- Fonction pour incr√©menter le compteur de requ√™tes
CREATE OR REPLACE FUNCTION increment_user_request(
    p_user_id UUID
) RETURNS VOID AS $$
BEGIN
    INSERT INTO user_requests (user_id, created_at)
    VALUES (p_user_id, NOW());
END;
$$ LANGUAGE plpgsql;

-- Fonction pour obtenir les requ√™tes restantes
CREATE OR REPLACE FUNCTION get_remaining_requests(
    p_user_id UUID,
    p_plan_type TEXT DEFAULT 'particulier'
) RETURNS INTEGER AS $$
DECLARE
    current_count INTEGER;
    request_limit INTEGER;
    current_month DATE;
BEGIN
    -- D√©terminer la limite selon le plan
    IF p_plan_type = 'professionnel' THEN
        RETURN -1; -- Illimit√©
    ELSE
        request_limit := 30; -- Particulier
    END IF;
    
    -- Obtenir le mois actuel
    current_month := DATE_TRUNC('month', CURRENT_DATE);
    
    -- Compter les requ√™tes du mois actuel
    SELECT COALESCE(COUNT(*), 0)
    INTO current_count
    FROM user_requests
    WHERE user_id = p_user_id
    AND created_at >= current_month;
    
    -- Retourner les requ√™tes restantes
    RETURN GREATEST(0, request_limit - current_count);
END;
$$ LANGUAGE plpgsql;
'''
    
    return sql_functions

def create_migration_file():
    """Cr√©er le fichier de migration pour la table user_requests"""
    migration_content = '''
-- Migration pour ajouter la table user_requests
-- Date: ''' + datetime.now().strftime("%Y-%m-%d %H:%M:%S") + '''

-- Cr√©er la table user_requests
CREATE TABLE IF NOT EXISTS user_requests (
    id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
    user_id UUID NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    request_type TEXT DEFAULT 'chat',
    metadata JSONB DEFAULT '{}'
);

-- Index pour optimiser les requ√™tes
CREATE INDEX IF NOT EXISTS idx_user_requests_user_id ON user_requests(user_id);
CREATE INDEX IF NOT EXISTS idx_user_requests_created_at ON user_requests(created_at);
CREATE INDEX IF NOT EXISTS idx_user_requests_user_created ON user_requests(user_id, created_at);

-- RLS (Row Level Security)
ALTER TABLE user_requests ENABLE ROW LEVEL SECURITY;

-- Politique RLS pour user_requests
CREATE POLICY "Users can view their own requests" ON user_requests
    FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own requests" ON user_requests
    FOR INSERT WITH CHECK (auth.uid() = user_id);

-- Ajouter la colonne plan_type √† user_profiles si elle n'existe pas
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'user_profiles' AND column_name = 'plan_type') THEN
        ALTER TABLE user_profiles ADD COLUMN plan_type TEXT DEFAULT 'particulier';
    END IF;
END $$;

-- Ajouter la colonne request_limit √† user_profiles si elle n'existe pas
DO $$ 
BEGIN
    IF NOT EXISTS (SELECT 1 FROM information_schema.columns 
                   WHERE table_name = 'user_profiles' AND column_name = 'request_limit') THEN
        ALTER TABLE user_profiles ADD COLUMN request_limit INTEGER DEFAULT 30;
    END IF;
END $$;
'''
    
    return migration_content

def main():
    """Fonction principale"""
    print("üîß Configuration de la limitation des requ√™tes")
    print("=" * 50)
    
    # Cr√©er le middleware
    middleware_file = "backend/request_limitation.py"
    with open(middleware_file, "w") as f:
        f.write(create_limitation_middleware())
    print(f"‚úÖ Middleware cr√©√© : {middleware_file}")
    
    # Cr√©er les fonctions SQL
    sql_file = "backend/migrations/add_request_limitation.sql"
    with open(sql_file, "w") as f:
        f.write(create_database_functions())
    print(f"‚úÖ Fonctions SQL cr√©√©es : {sql_file}")
    
    # Cr√©er la migration
    migration_file = "backend/migrations/create_user_requests_table.sql"
    with open(migration_file, "w") as f:
        f.write(create_migration_file())
    print(f"‚úÖ Migration cr√©√©e : {migration_file}")
    
    print("\nüìã Configuration termin√©e !")
    print("\nüìù Actions √† effectuer :")
    print("   1. Ex√©cutez la migration SQL sur votre base de donn√©es")
    print("   2. Int√©grez le middleware dans votre app FastAPI")
    print("   3. Testez la limitation avec un utilisateur particulier")
    print("   4. V√©rifiez que les professionnels n'ont pas de limitation")

if __name__ == "__main__":
    main() 