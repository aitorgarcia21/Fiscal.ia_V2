{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { StripeService } from '../services/stripe';\nexport const useStripe = () => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const stripeService = StripeService.getInstance();\n  const handleCheckout = async plan => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const url = await stripeService.createCheckoutSession(plan);\n      window.location.href = url;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Une erreur est survenue');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  const handlePortal = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const url = await stripeService.createPortalSession();\n      window.location.href = url;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Une erreur est survenue');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  return {\n    handleCheckout,\n    handlePortal,\n    isLoading,\n    error\n  };\n};\n_s(useStripe, \"vj++RuHna9NxFPGCY0p/mi1GZNM=\");","map":{"version":3,"names":["useState","StripeService","useStripe","_s","isLoading","setIsLoading","error","setError","stripeService","getInstance","handleCheckout","plan","url","createCheckoutSession","window","location","href","err","Error","message","handlePortal","createPortalSession"],"sources":["/Users/aitorgarcia/Scrapsnpip/frontend/src/hooks/useStripe.ts"],"sourcesContent":["import { useState } from 'react';\nimport { StripeService } from '../services/stripe';\nimport { PricingPlan } from '../config/pricing';\n\nexport const useStripe = () => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  const stripeService = StripeService.getInstance();\n\n  const handleCheckout = async (plan: PricingPlan) => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const url = await stripeService.createCheckoutSession(plan);\n      window.location.href = url;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Une erreur est survenue');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handlePortal = async () => {\n    try {\n      setIsLoading(true);\n      setError(null);\n      const url = await stripeService.createPortalSession();\n      window.location.href = url;\n    } catch (err) {\n      setError(err instanceof Error ? err.message : 'Une erreur est survenue');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return {\n    handleCheckout,\n    handlePortal,\n    isLoading,\n    error\n  };\n}; "],"mappings":";AAAA,SAASA,QAAQ,QAAQ,OAAO;AAChC,SAASC,aAAa,QAAQ,oBAAoB;AAGlD,OAAO,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC7B,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGL,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACM,KAAK,EAAEC,QAAQ,CAAC,GAAGP,QAAQ,CAAgB,IAAI,CAAC;EACvD,MAAMQ,aAAa,GAAGP,aAAa,CAACQ,WAAW,CAAC,CAAC;EAEjD,MAAMC,cAAc,GAAG,MAAOC,IAAiB,IAAK;IAClD,IAAI;MACFN,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMK,GAAG,GAAG,MAAMJ,aAAa,CAACK,qBAAqB,CAACF,IAAI,CAAC;MAC3DG,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGJ,GAAG;IAC5B,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZV,QAAQ,CAACU,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,yBAAyB,CAAC;IAC1E,CAAC,SAAS;MACRd,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,MAAMe,YAAY,GAAG,MAAAA,CAAA,KAAY;IAC/B,IAAI;MACFf,YAAY,CAAC,IAAI,CAAC;MAClBE,QAAQ,CAAC,IAAI,CAAC;MACd,MAAMK,GAAG,GAAG,MAAMJ,aAAa,CAACa,mBAAmB,CAAC,CAAC;MACrDP,MAAM,CAACC,QAAQ,CAACC,IAAI,GAAGJ,GAAG;IAC5B,CAAC,CAAC,OAAOK,GAAG,EAAE;MACZV,QAAQ,CAACU,GAAG,YAAYC,KAAK,GAAGD,GAAG,CAACE,OAAO,GAAG,yBAAyB,CAAC;IAC1E,CAAC,SAAS;MACRd,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;EAED,OAAO;IACLK,cAAc;IACdU,YAAY;IACZhB,SAAS;IACTE;EACF,CAAC;AACH,CAAC;AAACH,EAAA,CArCWD,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}