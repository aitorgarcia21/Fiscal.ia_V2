{"ast":null,"code":"var _StripeService;\nimport { PRICING } from '../config/pricing';\nexport class StripeService {\n  constructor() {\n    this.baseUrl = void 0;\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n  }\n  static getInstance() {\n    if (!StripeService.instance) {\n      StripeService.instance = new StripeService();\n    }\n    return StripeService.instance;\n  }\n  async createCheckoutSession(plan) {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/create-checkout-session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          priceId: PRICING[plan].stripePriceId,\n          successUrl: `${window.location.origin}/success`,\n          cancelUrl: `${window.location.origin}/pricing`\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de la création de la session de paiement');\n      }\n      const {\n        url\n      } = await response.json();\n      return url;\n    } catch (error) {\n      console.error('Erreur Stripe:', error);\n      throw error;\n    }\n  }\n  async createPortalSession() {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/create-portal-session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          returnUrl: `${window.location.origin}/account`\n        })\n      });\n      if (!response.ok) {\n        throw new Error('Erreur lors de la création de la session du portail');\n      }\n      const {\n        url\n      } = await response.json();\n      return url;\n    } catch (error) {\n      console.error('Erreur Stripe:', error);\n      throw error;\n    }\n  }\n}\n_StripeService = StripeService;\nStripeService.instance = void 0;","map":{"version":3,"names":["PRICING","StripeService","constructor","baseUrl","process","env","REACT_APP_API_URL","getInstance","instance","createCheckoutSession","plan","response","fetch","method","headers","body","JSON","stringify","priceId","stripePriceId","successUrl","window","location","origin","cancelUrl","ok","Error","url","json","error","console","createPortalSession","returnUrl","_StripeService"],"sources":["/Users/aitorgarcia/Scrapsnpip/frontend/src/services/stripe.ts"],"sourcesContent":["import { PRICING, PricingPlan } from '../config/pricing';\n\nexport class StripeService {\n  private static instance: StripeService;\n  private baseUrl: string;\n\n  private constructor() {\n    this.baseUrl = process.env.REACT_APP_API_URL || 'http://localhost:3000';\n  }\n\n  public static getInstance(): StripeService {\n    if (!StripeService.instance) {\n      StripeService.instance = new StripeService();\n    }\n    return StripeService.instance;\n  }\n\n  public async createCheckoutSession(plan: PricingPlan): Promise<string> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/create-checkout-session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          priceId: PRICING[plan].stripePriceId,\n          successUrl: `${window.location.origin}/success`,\n          cancelUrl: `${window.location.origin}/pricing`,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la création de la session de paiement');\n      }\n\n      const { url } = await response.json();\n      return url;\n    } catch (error) {\n      console.error('Erreur Stripe:', error);\n      throw error;\n    }\n  }\n\n  public async createPortalSession(): Promise<string> {\n    try {\n      const response = await fetch(`${this.baseUrl}/api/create-portal-session`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({\n          returnUrl: `${window.location.origin}/account`,\n        }),\n      });\n\n      if (!response.ok) {\n        throw new Error('Erreur lors de la création de la session du portail');\n      }\n\n      const { url } = await response.json();\n      return url;\n    } catch (error) {\n      console.error('Erreur Stripe:', error);\n      throw error;\n    }\n  }\n} "],"mappings":";AAAA,SAASA,OAAO,QAAqB,mBAAmB;AAExD,OAAO,MAAMC,aAAa,CAAC;EAIjBC,WAAWA,CAAA,EAAG;IAAA,KAFdC,OAAO;IAGb,IAAI,CAACA,OAAO,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;EACzE;EAEA,OAAcC,WAAWA,CAAA,EAAkB;IACzC,IAAI,CAACN,aAAa,CAACO,QAAQ,EAAE;MAC3BP,aAAa,CAACO,QAAQ,GAAG,IAAIP,aAAa,CAAC,CAAC;IAC9C;IACA,OAAOA,aAAa,CAACO,QAAQ;EAC/B;EAEA,MAAaC,qBAAqBA,CAACC,IAAiB,EAAmB;IACrE,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACT,OAAO,8BAA8B,EAAE;QAC1EU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBC,OAAO,EAAElB,OAAO,CAACU,IAAI,CAAC,CAACS,aAAa;UACpCC,UAAU,EAAE,GAAGC,MAAM,CAACC,QAAQ,CAACC,MAAM,UAAU;UAC/CC,SAAS,EAAE,GAAGH,MAAM,CAACC,QAAQ,CAACC,MAAM;QACtC,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACc,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,sDAAsD,CAAC;MACzE;MAEA,MAAM;QAAEC;MAAI,CAAC,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MACrC,OAAOD,GAAG;IACZ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,MAAMA,KAAK;IACb;EACF;EAEA,MAAaE,mBAAmBA,CAAA,EAAoB;IAClD,IAAI;MACF,MAAMpB,QAAQ,GAAG,MAAMC,KAAK,CAAC,GAAG,IAAI,CAACT,OAAO,4BAA4B,EAAE;QACxEU,MAAM,EAAE,MAAM;QACdC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB,CAAC;QACDC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;UACnBe,SAAS,EAAE,GAAGX,MAAM,CAACC,QAAQ,CAACC,MAAM;QACtC,CAAC;MACH,CAAC,CAAC;MAEF,IAAI,CAACZ,QAAQ,CAACc,EAAE,EAAE;QAChB,MAAM,IAAIC,KAAK,CAAC,qDAAqD,CAAC;MACxE;MAEA,MAAM;QAAEC;MAAI,CAAC,GAAG,MAAMhB,QAAQ,CAACiB,IAAI,CAAC,CAAC;MACrC,OAAOD,GAAG;IACZ,CAAC,CAAC,OAAOE,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtC,MAAMA,KAAK;IACb;EACF;AACF;AAACI,cAAA,GAhEYhC,aAAa;AAAbA,aAAa,CACTO,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}