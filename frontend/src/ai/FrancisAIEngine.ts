// üß† Francis AI Engine - Proprietary Zero-Cost AI
// Ultra-fast, Natural, No external dependencies

interface AIResponse {
  text: string;
  confidence: number;
  lawReferences: string[];
  followUpQuestions?: string[];
  entities: Record<string, any>;
  suggestions?: string[];
  calculations?: {
    type: string;
    results: Record<string, number>;
    breakdown: string[];
  };
}

interface ConversationContext {
  previousMessages: Array<{
    query: string;
    response: string;
    timestamp: Date;
    satisfaction?: number; // User feedback 1-5
    topics?: string[];
  }>;
  userProfile?: {
    nationality?: string;
    residencyStatus?: string;
    businessType?: string;
    interests: string[];
    profileType?: 'particulier' | 'professionnel' | 'entrepreneur' | 'crypto_trader' | 'family_office';
    previousCalculations?: string[];
    preferredLanguage?: 'fr' | 'es';
  };
  sessionState: Record<string, any>;
  learningData?: {
    successfulResponses: number;
    totalInteractions: number;
    commonQuestions: Record<string, number>;
    improvementAreas: string[];
  };
}

export class FrancisAIEngine {
  private knowledgeBase: any;
  private templates: any;
  private nlpProcessor: any;
  private calculators: any;
  private learningEngine: any;
  private suggestionEngine: any;

  constructor() {
    this.initializeKnowledgeBase();
    this.initializeTemplates();
    this.initializeNLP();
    this.initializeCalculators();
    this.initializeLearningEngine();
    this.initializeSuggestionEngine();
  }

  // üéØ Main AI Processing Pipeline
  async processQuery(query: string, context: ConversationContext): Promise<AIResponse> {
    // 1. Preprocessing & Cleaning
    const cleanQuery = this.preprocessQuery(query);
    
    // 2. Intent Detection & Entity Extraction
    const intent = await this.analyzeIntent(cleanQuery, context);
    const entities = await this.extractEntities(cleanQuery, intent);
    
    // 3. Context Enhancement
    const enhancedContext = this.enhanceContext(context, intent, entities);
    
    // 4. Knowledge Retrieval
    const relevantKnowledge = await this.retrieveKnowledge(intent, entities);
    
    // 5. Response Generation
    const response = await this.generateNaturalResponse(
      intent, 
      entities, 
      relevantKnowledge, 
      enhancedContext
    );
    
    // 6. Post-processing & Validation
    return this.validateAndEnhanceResponse(response, query, context);
  }

  // üßπ Query Preprocessing
  private preprocessQuery(query: string): string {
    return query
      .trim()
      .toLowerCase()
      // Normalize special characters
      .replace(/['']/g, "'")
      .replace(/[""]/g, '"')
      // Fix common typos in fiscal terms
      .replace(/\btmi\b/g, 'tranche marginale imposition')
      .replace(/\bigi\b/g, 'impot general indirect')
      .replace(/\bcrypto\b/g, 'cryptomonnaie')
      // Standardize question words
      .replace(/combien de temps/g, 'duree')
      .replace(/comment fait-on/g, 'comment faire');
  }

  // üéØ Advanced Intent Detection
  private async analyzeIntent(query: string, context: ConversationContext): Promise<string> {
    const intentPatterns = {
      // R√©sidence fiscale
      'residence_fiscale': [
        /residence.*fiscale/i,
        /devenir.*resident/i,
        /183.*jours/i,
        /domicile.*fiscal/i,
        /statut.*resident/i
      ],
      
      // IGI et TVA
      'igi_tva': [
        /igi/i,
        /impot.*general.*indirect/i,
        /tva.*andorre/i,
        /declaration.*trimestrielle/i,
        /periodicite.*igi/i
      ],
      
      // Cryptomonnaies
      'crypto': [
        /crypto.*monnaie/i,
        /bitcoin.*andorre/i,
        /loi.*24.*2022/i,
        /actif.*numerique/i,
        /crypto.*fiscal/i
      ],
      
      // Substance √©conomique
      'substance_economique': [
        /substance.*economique/i,
        /bureau.*andorre/i,
        /employe.*local/i,
        /decision.*effective/i,
        /activite.*reelle/i
      ],
      
      // Conventions fiscales
      'convention_fiscale': [
        /convention.*fiscale/i,
        /double.*imposition/i,
        /traite.*fiscal/i,
        /accord.*bilateral/i
      ],
      
      // Questions g√©n√©rales
      'info_generale': [
        /qu.*est.*ce.*que/i,
        /expliquer/i,
        /definition/i,
        /comment.*marche/i
      ],
      
      // Demande de simulation
      'simulation': [
        /simuler/i,
        /calculer/i,
        /estimer/i,
        /combien.*economiser/i,
        /optimisation/i
      ]
    };

    // Check context for intent continuation
    if (context.previousMessages.length > 0) {
      const lastResponse = context.previousMessages[context.previousMessages.length - 1];
      if (lastResponse.response.includes('souhaitez-vous')) {
        return 'continuation_' + (context.sessionState.lastIntent || 'general');
      }
    }

    // Pattern matching with confidence scoring
    let bestIntent = 'info_generale';
    let highestScore = 0;

    for (const [intent, patterns] of Object.entries(intentPatterns)) {
      let score = 0;
      for (const pattern of patterns) {
        if (pattern.test(query)) {
          score += 1;
          // Boost score for exact matches
          if (query.includes(intent.replace('_', ' '))) {
            score += 0.5;
          }
        }
      }
      
      if (score > highestScore) {
        highestScore = score;
        bestIntent = intent;
      }
    }

    // Store intent in session
    context.sessionState.lastIntent = bestIntent;
    
    return bestIntent;
  }

  // üè∑Ô∏è Entity Extraction
  private async extractEntities(query: string, intent: string): Promise<Record<string, any>> {
    const entities: Record<string, any> = {};

    // Temporal entities
    const timePatterns = {
      days: /(\d+)\s*jours?/i,
      months: /(\d+)\s*mois/i,
      years: /(\d+)\s*an(s|nee)?/i,
      specific_dates: /(\d{1,2})[\/\-](\d{1,2})[\/\-](\d{2,4})/
    };

    for (const [type, pattern] of Object.entries(timePatterns)) {
      const match = query.match(pattern);
      if (match) {
        entities.time = { type, value: match[1] || match[0] };
      }
    }

    // Numerical entities
    const numberPattern = /(\d+(?:\.\d+)?)\s*(euros?|‚Ç¨|k‚Ç¨|m‚Ç¨)?/gi;
    let match;
    const amounts = [];
    while ((match = numberPattern.exec(query)) !== null) {
      let value = parseFloat(match[1]);
      const unit = match[2]?.toLowerCase();
      
      if (unit?.includes('k')) value *= 1000;
      if (unit?.includes('m')) value *= 1000000;
      
      amounts.push(value);
    }
    if (amounts.length > 0) {
      entities.amounts = amounts;
    }

    // Nationality/Country entities
    const countries = [
      'france', 'espagne', 'portugal', 'italie', 'allemagne', 
      'belgique', 'suisse', 'luxembourg', 'monaco', 'andorre'
    ];
    
    for (const country of countries) {
      if (query.includes(country)) {
        entities.nationality = country;
        break;
      }
    }

    // Business type entities
    const businessTypes = [
      'sarl', 'sas', 'eurl', 'sa', 'sci', 'holding', 
      'freelance', 'consultant', 'trader', 'developpeur'
    ];
    
    for (const type of businessTypes) {
      if (query.includes(type)) {
        entities.businessType = type;
        break;
      }
    }

    // Intent-specific entities
    if (intent === 'residence_fiscale') {
      if (query.includes('183')) entities.residencyRule = '183_days';
      if (query.includes('centre')) entities.economicCenter = true;
    }

    if (intent === 'crypto') {
      const cryptos = ['bitcoin', 'ethereum', 'crypto', 'nft', 'defi'];
      entities.cryptoTypes = cryptos.filter(crypto => query.includes(crypto));
    }

    return entities;
  }

  // üß† Knowledge Base Initialization - EXHAUSTIVE ANDORRAN TAX LAW
  private initializeKnowledgeBase() {
    this.knowledgeBase = {
      // üìö LOIS ANDORRANES COMPL√àTES
      laws: {
        'residence_fiscale': {
          law_ref: 'Loi 95/2010 IRPF - Imp√¥t sur le Revenu des Personnes Physiques',
          article_refs: ['Art. 6', 'Art. 7', 'Art. 8 - Crit√®res de r√©sidence'],
          criteria: {
            physical: '183 jours minimum sur territoire andorran (Art. 6.1)',
            economic: 'Centre d\'int√©r√™ts √©conomiques principal (Art. 6.2)',
            administrative: 'D√©claration r√©sidence aupr√®s Immigraci√≥ (Art. 7)',
            family: 'Conjoint et enfants mineurs r√©sidents (Art. 6.3)'
          },
          calculation_methods: {
            day_counting: 'Jour entam√© = jour complet',
            exceptions: 'Hospitalisations et force majeure exclus',
            proof: 'Carnet de passages fronti√®res obligatoire'
          },
          exceptions: [
            'Fonctionnaires organisations internationales',
            '√âtudiants temporaires (< 2 ans)',
            'Retrait√©s UE (pension < 40K‚Ç¨)',
            'Sportifs professionnels (saison)',
            'Artistes en tourn√©e'
          ],
          benefits: [
            'IRPF progressif 0-10% (vs 45-47% France)',
            'Absence droits succession directe ligne',
            'Plus-values immobili√®res 0% apr√®s 10 ans',
            'Conventions anti-double imposition (21 pays)',
            'Secret bancaire renforc√©',
            'Pas d\'ISF ni droits donation'
          ],
          risks: [
            'Contr√¥les AFA renforc√©s depuis 2019',
            '√âchange automatique informations CRS',
            'Sanctions p√©nales r√©sidence fictive',
            'Redressements r√©troactifs possibles'
          ]
        },
        
        'igi': {
          law_ref: 'Loi 11/2012 IGI - Imp√¥t G√©n√©ral Indirect',
          article_refs: ['Art. 91-94 P√©riodicit√©', 'Art. 108 Obligations d√©claratives'],
          rates: {
            general: '4.5% (Art. 10)',
            reduced: '1% (Art. 11 - produits premi√®re n√©cessit√©)',
            super_reduced: '0% (Art. 12 - exportations, m√©dicaments)',
            increased: '9.5% (Art. 13 - tabac, alcool)'
          },
          thresholds: {
            monthly: 'CA > 3,600,000‚Ç¨ - D√©claration J+20 du mois suivant',
            quarterly: 'CA 250K-3,6M‚Ç¨ - D√©claration J+20 du trimestre',
            biannual: 'CA < 250K‚Ç¨ - D√©claration 31 janvier et 31 juillet'
          },
          exemptions: [
            'Op√©rations bancaires et assurances',
            'Location immobili√®re nue',
            'Prestations m√©dicales et dentaires',
            'Enseignement et formation',
            'Transport public voyageurs'
          ],
          deductions: [
            'IGI amont d√©ductible int√©gralement',
            'Investissements √©quipements productifs',
            'Frais g√©n√©raux directement li√©s',
            'TVA √©trang√®re selon conventions'
          ]
        },
        
        'crypto': {
          law_ref: 'Loi 24/2022 Actifs Num√©riques & Blockchain',
          article_refs: ['Art. 4 D√©finitions', 'Art. 15-18 Obligations fiscales'],
          taxation: {
            individual: {
              trading: 'IRPF 0-10% sur plus-values (bar√®me progressif)',
              holding: 'Exon√©ration apr√®s 1 an de d√©tention',
              mining: 'BIC imposable selon revenus r√©els',
              staking: 'Revenus mobiliers IRPF'
            },
            company: {
              trading: 'IS 10% sur b√©n√©fices r√©alis√©s',
              holding: 'Exemption participation > 5% > 1 an',
              treasury: 'R√©serves crypto d√©ductibles provisions'
            }
          },
          obligations: [
            'D√©claration AFA si d√©tention > 50K‚Ç¨',
            'Reporting automatique CRS/FATCA',
            'Tra√ßabilit√© blockchain obligatoire',
            'Audit annuel si volume > 1M‚Ç¨',
            'Compliance AML/KYC renforc√©e'
          ],
          allowed_activities: [
            'Trading et arbitrage',
            'Custody et garde s√©curis√©e',
            '√âmission tokens/ICO (licence ANBF)',
            'DeFi et yield farming',
            'NFT cr√©ation et commerce'
          ]
        },
        
        'substance_economique': {
          law_ref: 'Directive UE 2017/952 - Substance √©conomique',
          local_implementation: 'R√®glement AFA 2019/03',
          requirements: {
            premises: {
              minimum_size: '20m¬≤ bureaux d√©di√©s',
              lease_duration: 'Minimum 2 ans ferme',
              address: 'Adresse physique r√©elle d√©clar√©e',
              cost: '400-1500‚Ç¨/mois selon localisation'
            },
            personnel: {
              employees: 'Minimum 1 ETP qualifi√©',
              salary: 'Salaire minimum 1.286‚Ç¨/mois (2024)',
              contract: 'CDI ou CDD minimum 6 mois',
              skills: 'Qualifications adapt√©es √† l\'activit√©'
            },
            decisions: {
              board_meetings: 'Minimum 4 CA/an sur territoire',
              minutes: 'PV d√©taill√©s et archiv√©s',
              signatures: 'Mandataires sociaux r√©sidents',
              bank_accounts: 'Comptes bancaires andorrans'
            }
          },
          sectoral_requirements: {
            holding: 'Substance proportionnelle aux participations',
            finance: 'Licence ANBF + personnel qualifi√©',
            trading: 'Syst√®mes IT locaux + risk management',
            intellectual_property: 'R&D locale + cr√©ation IP'
          },
          penalties: [
            'Sanctions AFA jusqu\'√† 150K‚Ç¨',
            'D√©ch√©ance avantages fiscaux',
            '√âchange automatique informations',
            'Dissolution soci√©t√© possible'
          ]
        },
        
        'impot_societes': {
          law_ref: 'Loi 95/2010 IS - Imp√¥t sur les Soci√©t√©s',
          rates: {
            standard: '10% sur b√©n√©fices (Art. 3)',
            reduced: '2% banques (sur marge d\'interm√©diation)',
            special: '0% holdings (sous conditions)'
          },
          exemptions: {
            participation: 'Plus-values cession > 5% > 1 an',
            dividends: 'Dividendes re√ßus holdings qualifi√©s',
            intellectual_property: 'Revenus IP d√©velopp√©e localement (80% exon√©ration)'
          },
          deductions: [
            'Frais g√©n√©raux justifi√©s',
            'Amortissements lin√©aires/d√©gressifs',
            'Provisions pour risques',
            'D√©ficits reportables (5 ans max)'
          ]
        },
        
        'droits_succession': {
          law_ref: 'Loi 22/2022 Droits de Succession et Donation',
          rates: {
            direct_line: '0% (√©poux, enfants, parents)',
            second_degree: '8% (fr√®res, s≈ìurs, grands-parents)',
            third_degree: '10% (oncles, neveux)',
            unrelated: '20% (tiers)'
          },
          exemptions: [
            'R√©sidence principale familiale',
            'Entreprises familiales transmises',
            '≈íuvres d\'art et antiquit√©s',
            'Donations entre √©poux'
          ],
          planning_strategies: [
            'D√©membrement propri√©t√© (usufruit/nue-propri√©t√©)',
            'Soci√©t√© holding familiale',
            'Assurance-vie luxembourgeoise',
            'Trust anglo-saxon (selon convention)'
          ]
        }
      },
      
      // üåç CONVENTIONS FISCALES EXHAUSTIVES
      conventions: {
        france: {
          name: 'Convention France-Andorre 2015 (en vigueur 2017)',
          articles_key: ['Art. 4 R√©sidence', 'Art. 13 Plus-values', 'Art. 26 √âchange infos'],
          benefits: [
            '√âvitement double imposition',
            'R√©duction retenues √† la source 5-15%',
            'Protection investissements',
            'Proc√©dure amiable diff√©rends'
          ],
          conditions: [
            'Substance √©conomique renforc√©e obligatoire',
            'R√©sidence fiscale effective > 183 jours',
            'D√©claration revenus mondiaux',
            'Coop√©ration administrative automatique'
          ],
          specific_rules: {
            exit_tax: 'Sursis paiement sous conditions',
            impatriate: 'R√©gime impatri√©s non applicable',
            pensions: 'Imposables pays r√©sidence retrait√©'
          }
        },
        spain: {
          name: 'Convention Espagne-Andorre 2015',
          benefits: [
            'R√©duction retenues dividendes 5%',
            'Int√©r√™ts et royalties 0-10%',
            'Plus-values mobili√®res pays r√©sidence'
          ],
          conditions: [
            '183 jours effectifs obligatoires',
            'Centre int√©r√™ts √©conomiques principal',
            'Substance √©conomique r√©elle'
          ]
        },
        portugal: {
          name: 'Convention Portugal-Andorre 2015',
          benefits: ['√âlimination double imposition', 'Coop√©ration fiscale'],
          specific: 'Compatible r√©gime NHR portugais'
        },
        luxembourg: {
          name: 'Convention Luxembourg-Andorre 2014',
          benefits: ['Optimisation structures holding', 'Flux financiers facilit√©s']
        },
        uae: {
          name: 'Convention EAU-Andorre 2019',
          benefits: ['0% retenue source', 'Optimisation trading'],
          opportunities: 'R√©sidence duale possible'
        }
      },
      
      // üìã CAS PRATIQUES & JURISPRUDENCE
      practical_cases: {
        entrepreneur_tech: {
          profile: 'Entrepreneur tech fran√ßais, CA 2M‚Ç¨/an',
          solution: 'SL andorrane + r√©sidence fiscale = √©conomie 800K‚Ç¨/an',
          requirements: 'Substance √©conomique + 183 jours effectifs',
          timeline: '6-12 mois installation compl√®te'
        },
        crypto_trader: {
          profile: 'Trader crypto, gains 5M‚Ç¨/an',
          solution: 'R√©sidence + holding crypto = IRPF 10% max vs 45% France',
          specific: 'D√©claration AFA + compliance blockchain',
          savings: '1.75M‚Ç¨ √©conomis√©s annuellement'
        },
        family_office: {
          profile: 'Patrimoine familial 50M‚Ç¨',
          solution: 'Trust + soci√©t√© andorrane + optimisation succession',
          benefits: 'Transmission 0% + gestion optimis√©e',
          structures: 'Holding + SIF + assurance-vie'
        },
        consultant_international: {
          profile: 'Consultant international, clients EU/US',
          solution: 'R√©sidence andorrane + facturation soci√©t√©',
          optimization: 'IS 10% + IRPF 0-10% vs 45-60% origine',
          compliance: 'Substance √©conomique l√©g√®re suffisante'
        }
      },
      
      // ‚öñÔ∏è JURISPRUDENCE & D√âCISIONS AFA
      jurisprudence: {
        residence_fictive: {
          case: 'D√©cision AFA 2022/15 - R√©sidence fictive',
          facts: 'Contr√¥le 183 jours non respect√©s (falsification carnets)',
          decision: 'Redressement IRPF + p√©nalit√©s 150K‚Ç¨',
          lesson: 'Tra√ßabilit√© mouvements obligatoire'
        },
        substance_insuffisante: {
          case: 'D√©cision AFA 2023/08 - Substance √©conomique',
          facts: 'Bureau virtuel + employ√© fictif holding',
          decision: 'D√©ch√©ance avantages fiscaux + sanctions',
          lesson: 'Contr√¥les substance renforc√©s'
        },
        crypto_non_declaree: {
          case: 'D√©cision AFA 2023/12 - Cryptomonnaies',
          facts: 'Portefeuille crypto 2M‚Ç¨ non d√©clar√©',
          decision: 'R√©gularisation + p√©nalit√©s 40%',
          lesson: 'D√©claration obligatoire > 50K‚Ç¨'
        }
      },
      
      // üèõÔ∏è ORGANISMES & PROC√âDURES
      institutions: {
        afa: {
          name: 'Administration Fiscale Andorrane',
          missions: ['Contr√¥le fiscal', 'Recouvrement', 'Contentieux'],
          contact: 'afa@govern.ad',
          procedures: {
            control: 'D√©lai prescription 4 ans',
            appeal: 'Recours gracieux puis Tribunal',
            payment: 'Facilit√©s paiement possibles'
          }
        },
        anbf: {
          name: 'Autorit√© Nationale Banca Francesa',
          regulation: ['Banques', 'Assurances', 'Investissement'],
          licences: ['Banque', 'Assurance', 'Gestion actifs', 'Crypto']
        },
        immigration: {
          name: 'Service Immigration',
          permits: {
            passive_residence: 'Investissement 600K‚Ç¨',
            active_residence: 'Activit√© professionnelle',
            self_employed: 'Profession lib√©rale'
          }
        }
      },
      
      // üí∞ SIMULATIONS & CALCULATEURS
      calculators: {
        irpf_simulator: {
          tranches: [
            { min: 0, max: 24000, rate: 0 },
            { min: 24001, max: 40000, rate: 5 },
            { min: 40001, max: 999999, rate: 10 }
          ],
          deductions: ['Pension retraite 40%', 'Frais professionnels 20%']
        },
        igi_optimizer: {
          thresholds: {
            monthly: { limit: 3600000, deadline: 20 },
            quarterly: { limit: 250000, deadline: 20 },
            biannual: { limit: 0, deadline: 31 }
          }
        },
        substance_checker: {
          scoring: {
            premises: 25,
            employees: 35,
            decisions: 25,
            activity: 15
          },
          minimum_score: 70
        }
      },
      
      // üìö FAQ EXPERTS
      expert_faq: {
        banking: {
          question: 'Ouverture compte bancaire andorran obligatoire ?',
          answer: 'Oui pour r√©sidents fiscaux + substance √©conomique soci√©t√©s',
          details: 'Banques : Andbank, Cr√®dit Andorr√†, BPA - Due diligence renforc√©e'
        },
        real_estate: {
          question: 'Achat immobilier par non-r√©sidents ?',
          answer: 'Autoris√© avec autorisation Govern (sauf terrains > 1000m¬≤)',
          procedure: 'Demande Ministre + garantie bancaire + notaire'
        },
        education: {
          question: 'Scolarisation enfants expatri√©s ?',
          answer: 'Syst√®me andorran gratuit + Lyc√©e fran√ßais payant',
          languages: 'Catalan obligatoire + fran√ßais/espagnol au choix'
        }
      }
    };
  }

  // üìè Template System Initialization - EXPERT LEVEL
  private initializeTemplates() {
    this.templates = {
      residence_fiscale: {
        intro: (entities: any) => `üè† **R√©sidence Fiscale Andorrane${entities.nationality ? ` - Dossier ${entities.nationality.toUpperCase()}` : ''}**\n\n`,
        
        main_content: (entities: any, knowledge: any) => {
          let content = `üìú **Cadre l√©gal :** ${knowledge.law_ref}\n`;
          content += `üìã **Articles applicables :** ${knowledge.article_refs.join(', ')}\n\n`;
          
          content += `‚úÖ **Crit√®res l√©gaux obligatoires :**\n`;
          Object.entries(knowledge.criteria).forEach(([key, value]) => {
            content += `‚Ä¢ **${key === 'physical' ? 'Physique' : key === 'economic' ? '√âconomique' : key === 'administrative' ? 'Administratif' : 'Familial'}** : ${value}\n`;
          });
          
          // M√©thodes de calcul
          content += `\nüìä **M√©thodes de calcul AFA :**\n`;
          Object.entries(knowledge.calculation_methods).forEach(([key, value]) => {
            content += `‚Ä¢ ${value}\n`;
          });
          
          // Analyse personnalis√©e
          if (entities.time) {
            content += `\nüîç **Analyse de votre situation (${entities.time.value} ${entities.time.type}) :**\n`;
            if (entities.time.type === 'days') {
              const days = parseInt(entities.time.value);
              if (days >= 183) {
                content += `‚úÖ **Conformit√©** : ${days} jours ‚â• 183 jours requis\n`;
                content += `‚Ä¢ Statut r√©sident fiscal automatique\n`;
                content += `‚Ä¢ Obligations d√©claratives mondiales\n`;
              } else {
                content += `‚ö†Ô∏è **Non-conformit√©** : ${days} jours < 183 jours\n`;
                content += `‚Ä¢ Risque requalification r√©sidence\n`;
                content += `‚Ä¢ Jours manquants : ${183 - days} jours\n`;
              }
            }
          }
          
          return content;
        },
        
        benefits: (knowledge: any) => {
          let content = `\nüéØ **Avantages fiscaux confirm√©s :**\n`;
          knowledge.benefits.forEach((benefit: string) => {
            content += `‚Ä¢ ${benefit}\n`;
          });
          return content;
        },
        
        risks: (knowledge: any) => {
          let content = `\n‚ö†Ô∏è **Risques √† ma√Ætriser :**\n`;
          knowledge.risks.forEach((risk: string) => {
            content += `‚Ä¢ ${risk}\n`;
          });
          return content;
        },
        
        convention: (entities: any, knowledge: any) => {
          if (entities.nationality && knowledge.convention) {
            let content = `\nüåç **Convention fiscale ${entities.nationality}-Andorre :**\n`;
            content += `‚Ä¢ **Accord** : ${knowledge.convention.name}\n`;
            content += `‚Ä¢ **Avantages** : ${knowledge.convention.benefits.join(', ')}\n`;
            content += `‚Ä¢ **Conditions** : ${knowledge.convention.conditions.join(', ')}\n`;
            return content;
          }
          return '';
        },
        
        next_steps: (entities: any) => {
          return `\nüìà **Plan d'action personnalis√© :**\n‚Ä¢ √âvaluation compl√®te dossier fiscal\n‚Ä¢ Simulation √©conomies potentielles\n‚Ä¢ Roadmap installation (6-12 mois)\n‚Ä¢ Accompagnement d√©marches AFA/Immigration`;
        }
      },
      
      igi: {
        intro: () => `üè¢ **IGI - Ma√Ætrise compl√®te du syst√®me andorran**\n\n`,
        
        legal_framework: (knowledge: any) => {
          let content = `üìú **Cadre l√©gal :** ${knowledge.law_ref}\n`;
          content += `üìã **Articles cl√©s :** ${knowledge.article_refs.join(', ')}\n\n`;
          return content;
        },
        
        rates_detailed: (knowledge: any) => {
          let content = `üí∞ **Taux IGI applicables :**\n`;
          Object.entries(knowledge.rates).forEach(([rate_type, rate_value]) => {
            const typeName = {
              general: 'G√©n√©ral',
              reduced: 'R√©duit',
              super_reduced: 'Super r√©duit',
              increased: 'Major√©'
            }[rate_type];
            content += `‚Ä¢ **${typeName}** : ${rate_value}\n`;
          });
          return content;
        },
        
        periodicities: (knowledge: any) => {
          let content = `\nüìä **P√©riodicit√©s & d√©lai d√©claratifs :**\n`;
          Object.entries(knowledge.thresholds).forEach(([period, threshold]) => {
            const periodName = {
              monthly: 'üó∫Ô∏è Mensuelle',
              quarterly: 'üìÖ Trimestrielle', 
              biannual: 'üìã Semestrielle'
            }[period];
            content += `‚Ä¢ **${periodName}** : ${threshold}\n`;
          });
          return content;
        },
        
        exemptions: (knowledge: any) => {
          let content = `\n‚úÖ **Exon√©rations IGI :**\n`;
          knowledge.exemptions.forEach((exemption: string) => {
            content += `‚Ä¢ ${exemption}\n`;
          });
          return content;
        },
        
        optimization: (entities: any, knowledge: any) => {
          let content = `\nüí° **Strat√©gies d'optimisation :**\n`;
          knowledge.deductions.forEach((deduction: string) => {
            content += `‚Ä¢ ${deduction}\n`;
          });
          
          if (entities.amounts && entities.amounts[0]) {
            const ca = entities.amounts[0];
            content += `\nüîç **Analyse votre CA (${ca.toLocaleString()}‚Ç¨) :**\n`;
            if (ca > 3600000) {
              content += `‚Ä¢ üó∫Ô∏è D√©claration **mensuelle** obligatoire\n`;
              content += `‚Ä¢ D√©lai : J+20 chaque mois\n`;
              content += `‚Ä¢ Gestion tr√©sorerie critique\n`;
            } else if (ca > 250000) {
              content += `‚Ä¢ üìÖ D√©claration **trimestrielle** optimale\n`;
              content += `‚Ä¢ D√©lai : J+20 fin trimestre\n`;
              content += `‚Ä¢ √âquilibre gestion/co√ªt\n`;
            } else {
              content += `‚Ä¢ üìã D√©claration **semestrielle** avantageuse\n`;
              content += `‚Ä¢ D√©lais : 31 janvier & 31 juillet\n`;
              content += `‚Ä¢ Charge administrative r√©duite\n`;
            }
          }
          
          return content;
        }
      },
      
      crypto: {
        intro: () => `‚Çø **Cryptomonnaies Andorre - Cadre l√©gal 2024**\n\n`,
        
        legal_framework: (knowledge: any) => {
          let content = `üìú **L√©gislation :** ${knowledge.law_ref}\n`;
          content += `üìã **Articles :** ${knowledge.article_refs.join(', ')}\n\n`;
          return content;
        },
        
        taxation_detailed: (knowledge: any) => {
          let content = `üí∞ **Fiscalit√© crypto compl√®te :**\n\n`;
          
          content += `üë• **Particuliers :**\n`;
          Object.entries(knowledge.taxation.individual).forEach(([activity, rate]) => {
            const activityName = {
              trading: 'Trading/Arbitrage',
              holding: 'D√©tention long terme',
              mining: 'Mining/Validation',
              staking: 'Staking/DeFi'
            }[activity];
            content += `‚Ä¢ **${activityName}** : ${rate}\n`;
          });
          
          content += `\nüè¢ **Soci√©t√©s :**\n`;
          Object.entries(knowledge.taxation.company).forEach(([activity, rate]) => {
            const activityName = {
              trading: 'Trading professionnel',
              holding: 'Holding crypto',
              treasury: 'Tr√©sorerie crypto'
            }[activity];
            content += `‚Ä¢ **${activityName}** : ${rate}\n`;
          });
          
          return content;
        },
        
        compliance: (knowledge: any) => {
          let content = `\nüìã **Obligations l√©gales :**\n`;
          knowledge.obligations.forEach((obligation: string) => {
            content += `‚Ä¢ ${obligation}\n`;
          });
          return content;
        },
        
        activities: (knowledge: any) => {
          let content = `\n‚úÖ **Activit√©s autoris√©es :**\n`;
          knowledge.allowed_activities.forEach((activity: string) => {
            content += `‚Ä¢ ${activity}\n`;
          });
          return content;
        }
      },
      
      substance_economique: {
        intro: () => `üè¢ **Substance √âconomique - Conformit√© AFA/UE**\n\n`,
        
        legal_framework: (knowledge: any) => {
          let content = `üìú **Directive :** ${knowledge.law_ref}\n`;
          content += `üá¶üá© **Mise en ≈ìuvre :** ${knowledge.local_implementation}\n\n`;
          return content;
        },
        
        requirements_detailed: (knowledge: any) => {
          let content = `üìã **Exigences d√©taill√©es :**\n\n`;
          
          // Locaux
          content += `üè† **Locaux & adresse :**\n`;
          Object.entries(knowledge.requirements.premises).forEach(([req, detail]) => {
            const reqName = {
              minimum_size: 'Surface minimum',
              lease_duration: 'Dur√©e bail',
              address: 'Adresse l√©gale',
              cost: 'Co√ªt mensuel'
            }[req];
            content += `‚Ä¢ **${reqName}** : ${detail}\n`;
          });
          
          // Personnel
          content += `\nüë• **Personnel & qualifications :**\n`;
          Object.entries(knowledge.requirements.personnel).forEach(([req, detail]) => {
            const reqName = {
              employees: 'Effectif minimum',
              salary: 'Salaire minimum',
              contract: 'Type contrat',
              skills: 'Qualifications'
            }[req];
            content += `‚Ä¢ **${reqName}** : ${detail}\n`;
          });
          
          // D√©cisions
          content += `\n‚öñÔ∏è **D√©cisions & gouvernance :**\n`;
          Object.entries(knowledge.requirements.decisions).forEach(([req, detail]) => {
            const reqName = {
              board_meetings: 'Conseils administration',
              minutes: 'Proc√®s-verbaux',
              signatures: 'Pouvoirs signatures',
              bank_accounts: 'Comptes bancaires'
            }[req];
            content += `‚Ä¢ **${reqName}** : ${detail}\n`;
          });
          
          return content;
        },
        
        sectoral: (knowledge: any) => {
          let content = `\nüéØ **Exigences sectorielles :**\n`;
          Object.entries(knowledge.sectoral_requirements).forEach(([sector, requirement]) => {
            const sectorName = {
              holding: 'Holdings',
              finance: 'Finance',
              trading: 'Trading',
              intellectual_property: 'Propri√©t√© intellectuelle'
            }[sector];
            content += `‚Ä¢ **${sectorName}** : ${requirement}\n`;
          });
          return content;
        },
        
        penalties: (knowledge: any) => {
          let content = `\n‚ö†Ô∏è **Sanctions encourues :**\n`;
          knowledge.penalties.forEach((penalty: string) => {
            content += `‚Ä¢ ${penalty}\n`;
          });
          return content;
        }
      },
      
      practical_case: {
        intro: (entities: any) => `üìà **Cas pratique adapt√© √† votre profil**\n\n`,
        
        case_analysis: (entities: any, knowledge: any) => {
          // Trouve le cas le plus pertinent
          const cases = knowledge.practical_cases;
          let selectedCase = cases.entrepreneur_tech; // default
          
          if (entities.businessType === 'trader' || entities.cryptoTypes) {
            selectedCase = cases.crypto_trader;
          } else if (entities.amounts && entities.amounts[0] > 10000000) {
            selectedCase = cases.family_office;
          } else if (entities.businessType === 'consultant') {
            selectedCase = cases.consultant_international;
          }
          
          let content = `üë§ **Profil similaire :** ${selectedCase.profile}\n`;
          content += `üéØ **Solution optimis√©e :** ${selectedCase.solution}\n`;
          if (selectedCase.requirements) {
            content += `üìã **Pr√©requis :** ${selectedCase.requirements}\n`;
          }
          if (selectedCase.savings) {
            content += `üí∞ **√âconomies :** ${selectedCase.savings}\n`;
          }
          if (selectedCase.timeline) {
            content += `‚è±Ô∏è **Timeline :** ${selectedCase.timeline}\n`;
          }
          
          return content;
        }
      },
      
      simulation: {
        intro: () => `üìä **Simulation fiscale personnalis√©e**\n\n`,
        
        irpf_calculation: (entities: any, knowledge: any) => {
          if (!entities.amounts || !entities.amounts[0]) return '';
          
          const revenue = entities.amounts[0];
          const calculator = knowledge.calculators.irpf_simulator;
          
          let tax = 0;
          let content = `üí∞ **Calcul IRPF sur ${revenue.toLocaleString()}‚Ç¨ :**\n`;
          
          calculator.tranches.forEach((tranche: any) => {
            if (revenue > tranche.min) {
              const taxable = Math.min(revenue, tranche.max) - tranche.min + 1;
              const tranche_tax = taxable * tranche.rate / 100;
              tax += tranche_tax;
              
              if (tranche.rate > 0) {
                content += `‚Ä¢ Tranche ${tranche.min.toLocaleString()}-${tranche.max.toLocaleString()}‚Ç¨ : ${tranche_tax.toLocaleString()}‚Ç¨ (${tranche.rate}%)\n`;
              }
            }
          });
          
          content += `\nüéØ **Total IRPF Andorre :** ${tax.toLocaleString()}‚Ç¨\n`;
          content += `üá´üá∑ **Comparaison France :** ${(revenue * 0.45).toLocaleString()}‚Ç¨\n`;
          content += `üíµ **√âconomie annuelle :** ${((revenue * 0.45) - tax).toLocaleString()}‚Ç¨\n`;
          
          return content;
        }
      }
    };
  }

  // üîç NLP Processor Initialization
  private initializeNLP() {
    this.nlpProcessor = {
      // Sentiment analysis pour adapter le ton
      analyzeSentiment: (query: string) => {
        const positiveWords = ['merci', 'parfait', 'excellent', 'super', 'g√©nial'];
        const negativeWords = ['probl√®me', 'difficile', 'compliqu√©', 'impossible'];
        const urgentWords = ['urgent', 'rapidement', 'vite', 'imm√©diat'];
        
        return {
          positive: positiveWords.some(word => query.includes(word)),
          negative: negativeWords.some(word => query.includes(word)),
          urgent: urgentWords.some(word => query.includes(word))
        };
      },
      
      // D√©tection du niveau d'expertise
      detectExpertiseLevel: (query: string) => {
        const expertTerms = ['substance √©conomique', 'crs', 'fatca', 'convention fiscale'];
        const beginnerTerms = ['comment', 'qu\'est-ce que', 'expliquer'];
        
        if (expertTerms.some(term => query.includes(term))) return 'expert';
        if (beginnerTerms.some(term => query.includes(term))) return 'beginner';
        return 'intermediate';
      }
    };
  }

  // üß† Knowledge Retrieval
  private async retrieveKnowledge(intent: string, entities: Record<string, any>) {
    const knowledge = this.knowledgeBase.laws[intent];
    
    if (!knowledge) {
      return this.knowledgeBase.laws['info_generale'] || {
        law_ref: 'Base l√©gale andorrane',
        content: 'Information g√©n√©rale sur la fiscalit√© andorrane'
      };
    }
    
    // Enhance knowledge based on entities
    if (entities.nationality && this.knowledgeBase.conventions[entities.nationality]) {
      knowledge.convention = this.knowledgeBase.conventions[entities.nationality];
    }
    
    return knowledge;
  }

  // üó£Ô∏è Natural Response Generation
  private async generateNaturalResponse(
    intent: string, 
    entities: Record<string, any>, 
    knowledge: any, 
    context: ConversationContext
  ): Promise<AIResponse> {
    
    const template = this.templates[intent];
    let responseText = '';
    
    if (template) {
      // Build response using templates
      responseText += template.intro ? template.intro(entities) : '';
      responseText += template.main_content ? template.main_content(entities, knowledge) : '';
      responseText += template.benefits ? template.benefits(knowledge) : '';
      responseText += template.optimization ? template.optimization(entities) : '';
      responseText += template.next_steps ? template.next_steps(entities) : '';
    } else {
      // Fallback response generation
      responseText = this.generateFallbackResponse(intent, entities, knowledge);
    }
    
    // Add personalization
    responseText = this.personalizeResponse(responseText, context, entities);
    
    // Generate follow-up questions
    const followUpQuestions = this.generateFollowUpQuestions(intent, entities);
    
    return {
      text: responseText,
      confidence: this.calculateConfidence(intent, entities, knowledge),
      lawReferences: this.extractLawReferences(knowledge),
      followUpQuestions,
      entities
    };
  }

  // üìã Generate Follow-up Questions
  private generateFollowUpQuestions(intent: string, entities: Record<string, any>): string[] {
    const followUps: Record<string, string[]> = {
      residence_fiscale: [
        "Souhaitez-vous une simulation personnalis√©e ?",
        "Avez-vous des revenus dans d'autres pays ?",
        "Voulez-vous conna√Ætre les d√©marches administratives ?"
      ],
      igi: [
        "Voulez-vous simuler votre p√©riodicit√© optimale ?",
        "Souhaitez-vous des conseils d'optimisation ?",
        "Avez-vous des questions sur les exemptions ?"
      ],
      crypto: [
        "Poss√©dez-vous d√©j√† des cryptomonnaies √† d√©clarer ?",
        "Souhaitez-vous cr√©er une structure holding crypto ?",
        "Voulez-vous conna√Ætre les obligations de reporting ?"
      ]
    };
    
    return followUps[intent] || [
      "Avez-vous d'autres questions ?",
      "Souhaitez-vous approfondir ce sujet ?",
      "Voulez-vous une analyse personnalis√©e ?"
    ];
  }

  // üéØ Confidence Calculation
  private calculateConfidence(intent: string, entities: Record<string, any>, knowledge: any): number {
    let confidence = 0.7; // Base confidence
    
    // Boost confidence based on entity richness
    if (Object.keys(entities).length > 2) confidence += 0.15;
    if (entities.amounts) confidence += 0.1;
    if (entities.nationality) confidence += 0.05;
    
    // Boost confidence for known intents
    if (this.templates[intent]) confidence += 0.1;
    
    return Math.min(confidence, 0.95); // Cap at 95%
  }

  // üìö Extract Law References
  private extractLawReferences(knowledge: any): string[] {
    const refs = [knowledge.law_ref];
    
    if (knowledge.convention) {
      refs.push(knowledge.convention.name);
    }
    
    // Add regulatory references
    refs.push('R√®glement AFA 2023', 'Code fiscal andorran');
    
    return refs.filter(Boolean);
  }

  // üé® Personalize Response
  private personalizeResponse(
    response: string, 
    context: ConversationContext, 
    entities: Record<string, any>
  ): string {
    // Add personal touches based on context
    if (context.previousMessages.length === 0) {
      response = "Bonjour ! " + response;
    }
    
    // Sentiment-based adjustments
    const sentiment = this.nlpProcessor.analyzeSentiment(response);
    if (sentiment.urgent) {
      response = "‚ö° " + response;
    }
    
    // Add encouraging ending for complex topics
    if (response.length > 500) {
      response += "\n\nüí¨ N'h√©sitez pas si vous avez besoin de pr√©cisions !";
    }
    
    return response;
  }

  // üîÑ Fallback Response Generation
  private generateFallbackResponse(intent: string, entities: Record<string, any>, knowledge: any): string {
    return `ü§ñ **Francis IA √† votre service !**\n\nJe traite votre question sur ${intent.replace('_', ' ')}...\n\n${knowledge.content || 'Information disponible dans notre base l√©gale andorrane.'}\n\nPosez-moi une question plus sp√©cifique pour une r√©ponse d√©taill√©e !`;
  }

  // ‚úÖ Response Validation & Enhancement
  private validateAndEnhanceResponse(
    response: AIResponse, 
    originalQuery: string, 
    context: ConversationContext
  ): AIResponse {
    // Ensure minimum response quality
    if (response.text.length < 50) {
      response.text += "\n\nPourriez-vous pr√©ciser votre question pour que je puisse vous aider davantage ?";
      response.confidence = Math.max(response.confidence - 0.2, 0.3);
    }
    
    // Add conversation tracking
    context.sessionState.lastResponse = response.text;
    context.sessionState.lastEntities = response.entities;
    
    return response;
  }

  // üîß Context Enhancement
  private enhanceContext(
    context: ConversationContext, 
    intent: string, 
    entities: Record<string, any>
  ): ConversationContext {
    // Build user profile progressively
    if (!context.userProfile) {
      context.userProfile = { interests: [] };
    }
    
    if (entities.nationality && !context.userProfile.nationality) {
      context.userProfile.nationality = entities.nationality;
    }
    
    if (entities.businessType && !context.userProfile.businessType) {
      context.userProfile.businessType = entities.businessType;
    }
    
    // Track interests
    if (!context.userProfile.interests.includes(intent)) {
      context.userProfile.interests.push(intent);
    }
    
    return context;
  }

  // üßÆ Initialize Advanced Calculators
  private initializeCalculators() {
    this.calculators = {
      irpf: {
        brackets: [
          { min: 0, max: 24000, rate: 0 },
          { min: 24001, max: 40000, rate: 5 },
          { min: 40001, max: 999999, rate: 10 }
        ],
        calculate: (income: number) => {
          let tax = 0;
          for (const bracket of this.calculators.irpf.brackets) {
            if (income > bracket.min) {
              const taxableInBracket = Math.min(income, bracket.max) - bracket.min;
              tax += taxableInBracket * (bracket.rate / 100);
            }
          }
          return tax;
        }
      },
      igi: {
        rate: 4.5,
        thresholds: {
          monthly: 3600000,
          quarterly: 250000,
          biannual: 0
        },
        calculatePeriodicity: (revenue: number) => {
          if (revenue > this.calculators.igi.thresholds.monthly) return 'monthly';
          if (revenue > this.calculators.igi.thresholds.quarterly) return 'quarterly';
          return 'biannual';
        }
      },
      crypto: {
        threshold: 600,
        rates: {
          individual: 10,
          professional: 4.5
        },
        calculate: (gains: number, type: 'individual' | 'professional') => {
          if (gains < this.calculators.crypto.threshold) return 0;
          return gains * (this.calculators.crypto.rates[type] / 100);
        }
      }
    };
  }

  // üß† Initialize Learning Engine
  private initializeLearningEngine() {
    this.learningEngine = {
      successPatterns: new Map(),
      improvementAreas: [],
      
      recordSuccess: (query: string, response: string, satisfaction: number) => {
        if (satisfaction >= 4) {
          const pattern = this.extractPatterns(query);
          this.learningEngine.successPatterns.set(pattern, response);
        }
      },
      
      getImprovedResponse: (query: string) => {
        const pattern = this.extractPatterns(query);
        return this.learningEngine.successPatterns.get(pattern);
      },
      
      updateKnowledge: (feedback: any) => {
        // Learn from user feedback and improve responses
        if (feedback.type === 'correction') {
          this.learningEngine.improvementAreas.push(feedback.area);
        }
      }
    };
  }

  // üí° Initialize Intelligent Suggestions
  private initializeSuggestionEngine() {
    this.suggestionEngine = {
      profileBasedSuggestions: {
        particulier: [
          "Quelle est la proc√©dure pour obtenir la r√©sidence fiscale ?",
          "Comment calculer mes √©conomies d'imp√¥ts en Andorre ?",
          "Quels sont les crit√®res de substance √©conomique ?"
        ],
        professionnel: [
          "Comment optimiser ma d√©claration IGI ?",
          "Quelle p√©riodicit√© choisir pour mon CA ?",
          "Comment structurer mon activit√© en Andorre ?"
        ],
        entrepreneur: [
          "Comment cr√©er une holding en Andorre ?",
          "Quelles sont les obligations de substance √©conomique ?",
          "Comment optimiser la fiscalit√© de mes dividendes ?"
        ],
        crypto_trader: [
          "Comment d√©clarer mes gains en cryptomonnaies ?",
          "Quelle fiscalit√© pour le trading crypto ?",
          "Comment structurer une activit√© crypto en Andorre ?"
        ]
      },
      
      contextBasedSuggestions: {
        residence_fiscale: [
          "Voulez-vous simuler vos √©conomies d'imp√¥ts ?",
          "Souhaitez-vous conna√Ætre les d√©marches pratiques ?",
          "Avez-vous des questions sur la substance √©conomique ?"
        ],
        igi_tva: [
          "Voulez-vous calculer votre p√©riodicit√© optimale ?",
          "Souhaitez-vous des conseils d'optimisation ?",
          "Avez-vous des questions sur les exemptions ?"
        ],
        crypto: [
          "Poss√©dez-vous d√©j√† des cryptomonnaies √† d√©clarer ?",
          "Souhaitez-vous cr√©er une structure crypto ?",
          "Voulez-vous conna√Ætre les obligations de reporting ?"
        ]
      },
      
      generateSuggestions: (userProfile: any, currentIntent: string) => {
        const suggestions: string[] = [];
        
        // Profile-based suggestions
        if (userProfile?.profileType) {
          const profileSuggestions = this.suggestionEngine.profileBasedSuggestions[userProfile.profileType];
          if (profileSuggestions) {
            suggestions.push(...profileSuggestions.slice(0, 2));
          }
        }
        
        // Context-based suggestions
        if (currentIntent) {
          const contextSuggestions = this.suggestionEngine.contextBasedSuggestions[currentIntent];
          if (contextSuggestions) {
            suggestions.push(...contextSuggestions.slice(0, 2));
          }
        }
        
        return Array.from(new Set(suggestions)).slice(0, 3); // Remove duplicates, max 3
      }
    };
  }

  // üîç Extract Patterns for Learning
  private extractPatterns(query: string): string {
    // Simple pattern extraction - can be enhanced
    return query
      .toLowerCase()
      .replace(/\d+/g, 'NUM')
      .replace(/[^a-z\s]/g, '')
      .trim();
  }
}

export default FrancisAIEngine;
