import requests
import json
import time

# URL de l'API
API_URL = "https://fiscal-ia.net/api/test-francis"

# Questions de test
test_questions = [
    "donne moi les tmi",
    "qu'est-ce que la TVA et ses diff√©rents taux ?",
    "comment calculer la plus-value immobili√®re ?",
    "quelles sont les r√©ductions d'imp√¥t possibles ?",
    "comment fonctionne le quotient familial ?",
    "qu'est-ce que le pr√©l√®vement √† la source ?",
    "comment d√©clarer des revenus locatifs ?",
    "qu'est-ce que la flat tax ?"
]

print("üß™ Test de Francis - Assistant Fiscal\n")
print("=" * 50)

for i, question in enumerate(test_questions, 1):
    print(f"\nüìù Question {i}: {question}")
    print("-" * 50)
    
    try:
        # Faire la requ√™te
        response = requests.post(
            API_URL,
            json={"message": question},
            headers={"Content-Type": "application/json"},
            timeout=60
        )
        
        if response.status_code == 200:
            data = response.json()
            answer = data.get("response", "Pas de r√©ponse")
            
            # V√©rifier la qualit√© de la r√©ponse
            print(f"‚úÖ R√©ponse re√ßue ({len(answer)} caract√®res)")
            
            # Afficher un extrait de la r√©ponse
            if len(answer) > 300:
                print(f"\n{answer[:300]}...")
            else:
                print(f"\n{answer}")
            
            # Analyser la r√©ponse
            quality_indicators = {
                "Chiffres pr√©cis": any(char.isdigit() for char in answer),
                "Format structur√©": "‚Ä¢" in answer or "-" in answer or "**" in answer,
                "Citations CGI": "article" in answer.lower() or "cgi" in answer.lower(),
                "Exemples concrets": "exemple" in answer.lower() or "‚Ç¨" in answer
            }
            
            print("\nüìä Analyse de qualit√©:")
            for indicator, present in quality_indicators.items():
                print(f"  - {indicator}: {'‚úì' if present else '‚úó'}")
                
        else:
            print(f"‚ùå Erreur {response.status_code}: {response.text}")
            
    except requests.exceptions.Timeout:
        print("‚è±Ô∏è Timeout - La requ√™te a pris trop de temps")
    except Exception as e:
        print(f"‚ùå Erreur: {str(e)}")
    
    # Pause entre les requ√™tes
    if i < len(test_questions):
        time.sleep(2)

print("\n" + "=" * 50)
print("‚úÖ Tests termin√©s!")
