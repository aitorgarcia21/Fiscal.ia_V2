import os
import json
import numpy as np
from pathlib import Path
from typing import List, Dict, Tuple
import requests
import time
from mistralai.client import MistralClient
from mistralai.models.chat_completion import ChatMessage

# Importer les nouveaux modules RAG
from mistral_embeddings import search_similar_bofip_chunks, get_embedding as get_embedding_from_mistral_script, cosine_similarity as cosine_similarity_from_mistral_script
from rag_cgi import get_cgi_response
from mistral_cgi_embeddings import load_embeddings, search_similar_articles

# Configuration
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

# Pour les articles CGI (existants)
CGI_EMBEDDINGS_DIR = Path("data/embeddings") # Utiliser Path pour la coh√©rence
CGI_CHUNKS_DIR = Path("data/cgi_chunks")

# Pour les chunks BOFIP (nouveaux)
# Ces chemins sont d√©j√† utilis√©s par search_similar_bofip_chunks, mais les red√©finir ici peut √™tre utile pour la clart√©
# ou si on voulait acc√©der aux fichiers directement depuis ce script √† l'avenir.
BOFIP_CHUNKS_TEXT_DIR = Path("data/bofip_chunks_text")
BOFIP_EMBEDDINGS_DIR = Path("data/bofip_embeddings")


# Initialisation du client Mistral
client = MistralClient(api_key=MISTRAL_API_KEY) if MISTRAL_API_KEY else None

# Utiliser les fonctions get_embedding et cosine_similarity du script mistral_embeddings
# pour √©viter la red√©finition et assurer la coh√©rence.
# Si get_embedding est sp√©cifique √† ce fichier (par exemple, gestion d'erreur diff√©rente), 
# il faudrait le clarifier ou le fusionner.
# Pour l'instant, supposons que celle de mistral_embeddings.py est la r√©f√©rence.
get_embedding = get_embedding_from_mistral_script
cosine_similarity = cosine_similarity_from_mistral_script


def format_article_for_display(article_data: Dict) -> str:
    """Formate un article du CGI pour l'affichage avec sa structure."""
    chunks = article_data.get('chunks', [])
    if not chunks:
        return f"Article {article_data.get('article_number', 'N/A')} (pas de contenu)"
    
    return f"Article {article_data.get('article_number', 'N/A')}\n\n" + '\n\n'.join(chunks)

def search_similar_cgi_articles(query: str, top_k: int = 3) -> List[Dict]:
    """Recherche les articles du CGI les plus similaires √† la requ√™te avec le nouveau syst√®me."""
    try:
        embeddings = load_embeddings()
        if not embeddings:
            print("Aucun embedding CGI trouv√©.")
            return []
        
        similar_articles = search_similar_articles(query, embeddings, top_k)
        
        # Formater pour la compatibilit√© avec le reste du code
        results = []
        for article in similar_articles:
            results.append({
                'similarity': 0.9,  # Score factice, la recherche vectorielle a d√©j√† fait le tri
                'content': article.get('text', ''),
                'source': f"CGI Article {article.get('article_number', 'N/A')}",
                'article_id': article.get('article_number', 'N/A')
            })
        
        return results
    except Exception as e:
        print(f"Erreur dans search_similar_cgi_articles: {e}")
        return []

def create_prompt(query: str, cgi_articles: List[Dict], bofip_chunks: List[Dict], conversation_history: List[Dict] = None) -> str:
    """Cr√©e le prompt pour l'assistant fiscal avec contextes CGI et BOFIP et m√©moire de conversation."""
    
    cgi_context_str = "N/A"
    if cgi_articles:
        cgi_context_str = "\n\n".join([
            f"Source: {article.get('source', 'CGI N/A')}\nContenu: {article['content']}"
            for article in cgi_articles
        ])

    bofip_context_str = "N/A"
    if bofip_chunks:
        bofip_context_str = "\n\n".join([
            f"Source: BOFIP (fichier: {chunk.get('file', 'N/A')}, similarit√©: {chunk.get('similarity', 0):.3f})\nContenu: {chunk['text']}"
            for chunk in bofip_chunks
        ])
    
    # Construire l'historique de conversation
    history_str = "N/A"
    if conversation_history and len(conversation_history) > 1:
        history_items = []
        for msg in conversation_history[-6:]:  # Garder les 6 derniers messages maximum
            role = "Utilisateur" if msg.get('role') == 'user' else "Francis"
            content = msg.get('content', '')[:200] + "..." if len(msg.get('content', '')) > 200 else msg.get('content', '')
            history_items.append(f"{role}: {content}")
        history_str = "\n".join(history_items)
    
    prompt = f"""Tu es Francis, un assistant fiscal expert hautement sp√©cialis√© en fiscalit√© fran√ßaise, cr√©√© par la soci√©t√© Fiscal.ia. Tu es l'accompagnateur fiscal personnel de l'utilisateur.

Historique de conversation r√©cente:
---
{history_str}
---

Question actuelle: {query}

Contexte du Code G√©n√©ral des Imp√¥ts (CGI):
---
{cgi_context_str}
---

Contexte du BOFIP:
---
{bofip_context_str}
---

Instructions:
- Tu es un expert fiscal et tu DOIS aider l'utilisateur en r√©pondant √† sa question de mani√®re claire et pratique.
- R√àGLE ABSOLUE : N'utilise JAMAIS d'ast√©risques (*), de formatage markdown, de gras, d'italique ou de caract√®res sp√©ciaux de mise en forme dans tes r√©ponses.
- √âcris EXCLUSIVEMENT en texte simple, clair et lisible.
- Utilise uniquement des mots, des chiffres, des points, des virgules et des tirets simples pour structurer.
- INTERDIT : *, **, ___, `, #, etc.
- AUTORIS√â : texte simple avec num√©rotation (1., 2., 3.) et tirets (-) pour les listes.

üéØ ACCOMPAGNEMENT FISCAL PROACTIF :
- M√âMOIRE : Utilise l'historique de conversation pour comprendre le contexte et la situation de l'utilisateur
- SUIVI : Fais r√©f√©rence aux √©changes pr√©c√©dents quand c'est pertinent
- PROACTIVIT√â : Propose des actions concr√®tes, des optimisations et des conseils personnalis√©s
- √âCH√âANCES : Rappelle les dates importantes (d√©clarations, versements, etc.)
- ANTICIPATION : Identifie les opportunit√©s d'optimisation fiscale
- QUESTIONS DE SUIVI : Pose des questions pertinentes pour mieux accompagner l'utilisateur

üéØ R√àGLES STRICTES DE PR√âCISION FISCALE :
- INTERDIT ABSOLU : Inventer des pourcentages, taux ou seuils non mentionn√©s dans les sources CGI/BOFIP
- OBLIGATION : Utiliser UNIQUEMENT les chiffres pr√©sents dans les textes officiels fournis
- En cas de doute sur un pourcentage : dire "je dois v√©rifier cette information pr√©cise"
- JAMAIS d'approximation sur les taux d'imposition, seuils de d√©tention, dur√©es l√©gales
- Si les sources ne contiennent pas l'information exacte : le pr√©ciser clairement

üóìÔ∏è ANN√âE FISCALE 2025 :
- Donne TOUJOURS les informations pour 2025 sauf mention contraire
- Utilise prioritairement les donn√©es du CGI et BOFIP pour les bar√®mes officiels 2025

üìù MA√éTRISE PARFAITE DES ACRONYMES FISCAUX :
- TMI = Tranche Marginale d'Imposition | IFI = Imp√¥t Fortune Immobili√®re | TVA = Taxe Valeur Ajout√©e
- IR = Imp√¥t Revenu | IS = Imp√¥t Soci√©t√©s | CFE = Cotisation Fonci√®re Entreprises
- BIC = B√©n√©fices Industriels Commerciaux | BNC = B√©n√©fices Non Commerciaux | BA = B√©n√©fices Agricoles
- PEA = Plan √âpargne Actions | PER = Plan √âpargne Retraite | PERP = Plan √âpargne Retraite Populaire
- LMNP = Location Meubl√©e Non Professionnelle | LMP = Location Meubl√©e Professionnelle
- SCPI = Soci√©t√© Civile Placement Immobilier | SCI = Soci√©t√© Civile Immobili√®re
- SASU = Soci√©t√© par Actions Simplifi√©e Unipersonnelle | EURL = Entreprise Unipersonnelle Responsabilit√© Limit√©e
- SARL = Soci√©t√© Responsabilit√© Limit√©e | SAS = Soci√©t√© par Actions Simplifi√©e
- EIRL = Entreprise Individuelle Responsabilit√© Limit√©e | EI = Entreprise Individuelle
- RSI = R√©gime Social Ind√©pendants | URSSAF = Union Recouvrement S√©curit√© Sociale
- CAF = Caisse Allocations Familiales | MSA = Mutualit√© Sociale Agricole
- DGFIP = Direction G√©n√©rale Finances Publiques | SIP = Service Imp√¥ts Particuliers
- SIE = Service Imp√¥ts Entreprises | CDI = Centre Des Imp√¥ts
- BOFIP = Bulletin Officiel Finances Publiques | CGI = Code G√©n√©ral Imp√¥ts
- LF = Loi Finances | PLF = Projet Loi Finances | LFSS = Loi Financement S√©curit√© Sociale
- CIR = Cr√©dit Imp√¥t Recherche | CICE = Cr√©dit Imp√¥t Comp√©titivit√© Emploi
- CIMR = Contribution Institutions M√©dicales Retirement | C3S = Contribution Sociale Solidarit√©
- CRDS = Contribution Remboursement Dette Sociale | CSG = Contribution Sociale G√©n√©ralis√©e
- CVAE = Cotisation Valeur Ajout√©e Entreprises | CET = Contribution √âconomique Territoriale
- DMTO = Droits Mutation Titre On√©reux | DMTG = Droits Mutation Titre Gratuit
- TEOM = Taxe Enl√®vement Ordures M√©nag√®res | TH = Taxe Habitation
- TFPB = Taxe Fonci√®re Propri√©t√©s B√¢ties | TFPNB = Taxe Fonci√®re Propri√©t√©s Non B√¢ties

üéØ EXPERTISE TECHNIQUE COMPL√àTE :
- R√©gimes fiscaux : Micro, R√©el simplifi√©, R√©el normal, D√©claration contr√¥l√©e
- Niches fiscales : Pinel, Denormandie, Malraux, FCPI, FIP, Girardin
- Plus-values : Immobili√®res, mobili√®res, professionnelles, abattements 2025
- Transmission : Donation, succession, d√©membrement, pacte Dutreil
- International : CUF, conventions, exit tax, revenus √©trangers
- Contr√¥les : ESFP, v√©rification comptabilit√©, contr√¥le sur pi√®ces

üìà ACCOMPAGNEMENT PERSONNALIS√â :
- Analyse la situation compl√®te de l'utilisateur
- Propose des optimisations concr√®tes et chiffr√©es
- Sugg√®re des actions √† court et long terme
- Rappelle les √©ch√©ances importantes
- Anticipe les besoins fiscaux futurs
- Pose des questions de suivi pertinentes

- Utilise prioritairement les informations fournies du CGI et du BOFIP pour construire ta r√©ponse.
- Si les contextes contiennent des √©l√©ments pertinents, m√™me partiels, utilise-les pour donner une r√©ponse utile.
- Synth√©tise les informations disponibles et donne des conseils pratiques.
- Tu peux mentionner tes sources (ex: "Selon l'article X du CGI" ou "D'apr√®s le BOFIP") mais ce n'est pas obligatoire.
- √âVITE les formules trop formelles comme "En tant que Francis..." ou "les informations ne me permettent pas".
- Sois direct, utile et professionnel.
- Si tu n'as vraiment aucune information pertinente, donne quand m√™me une r√©ponse g√©n√©rale bas√©e sur tes connaissances fiscales fran√ßaises pour 2025.

COMPORTEMENT D'ACCOMPAGNEMENT :
- Si c'est une nouvelle conversation, pr√©sente-toi bri√®vement et demande la situation de l'utilisateur
- Si l'utilisateur a d√©j√† partag√© des informations, fais-y r√©f√©rence et propose des conseils personnalis√©s
- Termine toujours par une question de suivi ou une proposition d'action concr√®te
- Sois proactif et bienveillant dans tes conseils

R√©ponds directement √† la question:"""
    
    return prompt

def get_fiscal_response(query: str, conversation_history: List[Dict] = None) -> Tuple[str, List[str], float]:
    """Obtient une r√©ponse de l'assistant fiscal et les sources utilis√©es avec m√©moire de conversation."""
    all_sources_for_api = []
    # Estimer une confiance globale simple. Peut √™tre affin√© plus tard.
    # Par exemple, bas√©e sur la similarit√© moyenne des chunks retenus, ou si des chunks ont √©t√© trouv√©s.
    confidence_score = 0.5 

    try:
        if not client:
            return "Erreur: Client Mistral non configur√©", [], 0.0
        
        similar_cgi_articles = search_similar_cgi_articles(query, top_k=2)
        similar_bofip_chunks = search_similar_bofip_chunks(query, top_k=2)

        if similar_cgi_articles:
            all_sources_for_api.extend([art.get('source', 'CGI inconnu') for art in similar_cgi_articles])
            confidence_score = max(confidence_score, 0.7) # Augmenter la confiance si CGI trouv√©
        if similar_bofip_chunks:
            all_sources_for_api.extend([f"BOFIP: {chunk.get('file', 'Chunk inconnu')}" for chunk in similar_bofip_chunks])
            confidence_score = max(confidence_score, 0.75) # Augmenter un peu plus si BOFIP trouv√©

        if not similar_cgi_articles and not similar_bofip_chunks:
            print("Aucun article CGI ni chunk BOFIP pertinent trouv√©.")
            # Pourrait retourner une r√©ponse indiquant l'absence d'info, ou laisser Mistral le dire.
            # Si on veut que Mistral le dise, on envoie un prompt sans contexte sp√©cifique.
            # prompt = f"Tu es un assistant fiscal expert. R√©ponds √† la question suivante au mieux de tes connaissances g√©n√©rales: {query}" 
            # Pour l'instant, on s'en tient au prompt strict et on s'attend √† ce que Mistral dise qu'il ne sait pas.
            confidence_score = 0.2

        prompt = create_prompt(query, similar_cgi_articles, similar_bofip_chunks, conversation_history)
        
        messages = [ChatMessage(role="user", content=prompt)]
        
        chat_response = client.chat(
            model="mistral-large-latest",
            messages=messages,
            temperature=0.5,
            max_tokens=1500
        )
        
        answer = chat_response.choices[0].message.content

        # Si Mistral dit qu'il ne peut pas r√©pondre, on peut baisser la confiance.
        if "ne me permettent pas de r√©pondre" in answer or "pas d'informations suffisantes" in answer:
            confidence_score = min(confidence_score, 0.4) # Baisser la confiance si l'IA elle-m√™me est incertaine
        elif similar_cgi_articles or similar_bofip_chunks: # Si on a fourni du contexte et que l'IA n'a pas dit "je ne sais pas"
            confidence_score = 0.85 # Bonne confiance si contexte utilis√©

        return answer, list(set(all_sources_for_api)), confidence_score
    
    except Exception as e:
        print(f"Erreur dans get_fiscal_response: {e}")
        return "Je rencontre des difficult√©s pour traiter votre demande. Veuillez r√©essayer plus tard.", [], 0.1

def main():
    print("Assistant Fiscal Expert (tapez 'quit' pour quitter)")
    print("=" * 50)
    
    while True:
        query = input("\nVotre question : ").strip()
        if query.lower() == 'quit':
            break
            
        try:
            # La fonction main est surtout pour le test en CLI, 
            # la structure de retour de get_fiscal_response a chang√©.
            answer, sources, confidence = get_fiscal_response(query)
            print("\nR√©ponse de Francis:")
            print("-" * 50)
            print(answer)
            print("-" * 50)
            if sources:
                print(f"Sources potentielles: {', '.join(sources)}")
            print(f"Confiance (estimation): {confidence:.2f}")
            print("-" * 50)
        except Exception as e:
            print(f"Erreur : {str(e)}")
        
        # time.sleep(1) # D√©lai entre les requ√™tes, peut-√™tre moins n√©cessaire en CLI

if __name__ == "__main__":
    if not MISTRAL_API_KEY:
        print("Erreur : La cl√© API Mistral n'est pas d√©finie (MISTRAL_API_KEY).")
        exit(1)
    if not client:
        print("Erreur : Le client Mistral n'a pas pu √™tre initialis√©. V√©rifiez la cl√© API.")
        exit(1)
    main() 