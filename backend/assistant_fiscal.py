import os
import json
import asyncio
import signal
from typing import List, Dict, Tuple
from groq import Groq
from mistralai.client import MistralClient  # Keep for fallback
from mistralai.models.chat_completion import ChatMessage

# Imports pour les embeddings
try:
    from mistral_cgi_embeddings import load_embeddings, search_similar_articles  # type: ignore
    from mistral_embeddings import search_similar_bofip_chunks  # type: ignore
    from rag_swiss import SwissRAGSystem  # type: ignore
    CGI_EMBEDDINGS_AVAILABLE = True
    BOFIP_EMBEDDINGS_AVAILABLE = True
    SWISS_RAG_AVAILABLE = True
except ImportError:
    CGI_EMBEDDINGS_AVAILABLE = False
    BOFIP_EMBEDDINGS_AVAILABLE = False
    SWISS_RAG_AVAILABLE = False

# Configuration
# Configuration API hybride
GROQ_API_KEY = os.getenv("GROQ_API_KEY")
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")

# Chat principal = Mistral (besoin RAG/embeddings)
client = MistralClient(api_key=MISTRAL_API_KEY) if MISTRAL_API_KEY else None

# Client Groq pour Francis vocal uniquement
groq_client = Groq(api_key=GROQ_API_KEY) if GROQ_API_KEY else None

if client:
    print("üéØ Chat/RAG: Mistral API (avec embeddings)")
if groq_client:
    print("üöÄ Francis vocal: Groq API (gratuit, sans RAG)")
if not client and not groq_client:
    print("‚ùå Aucune cl√© API disponible")

# PII sanitizer
from pii_sanitizer import sanitize_text

# Sources officielles autoris√©es UNIQUEMENT
OFFICIAL_SOURCES = {
    'CGI': ['cgi_chunks', 'CGI'],
    'BOFIP': ['bofip_chunks_text', 'bofip_embeddings', 'BOFIP'],
    'SWISS': ['swiss_chunks_text', 'swiss_embeddings', 'SWISS']
}

# Initialisation du syst√®me RAG suisse
swiss_rag = None
if SWISS_RAG_AVAILABLE:
    try:
        swiss_rag = SwissRAGSystem()
    except Exception as e:
        print(f"Erreur initialisation RAG suisse: {e}")
        SWISS_RAG_AVAILABLE = False

def validate_official_source(source_info: Dict) -> bool:
    """Valide qu'une source est officielle (CGI, BOFiP ou fiscalit√© suisse)."""
    if not source_info:
        return False
    
    source_type = source_info.get('type', '').upper()
    source_path = source_info.get('path', '')
    
    # V√©rifier si c'est une source CGI
    if source_type == 'CGI' or any(cgi_marker in source_path for cgi_marker in OFFICIAL_SOURCES['CGI']):
        return True
    
    # V√©rifier si c'est une source BOFiP
    if source_type == 'BOFIP' or any(bofip_marker in source_path for bofip_marker in OFFICIAL_SOURCES['BOFIP']):
        return True
    
    # V√©rifier si c'est une source fiscalit√© suisse
    if source_type == 'SWISS' or any(swiss_marker in source_path for swiss_marker in OFFICIAL_SOURCES['SWISS']):
        return True
    
    return False

def search_similar_cgi_articles(query: str, top_k: int = 3) -> List[Dict]:
    """Recherche les articles du CGI les plus similaires √† la requ√™te EXCLUSIVEMENT."""
    try:
        # Ces imports peuvent √©chouer en environnement de test ou si les embeddings ne sont pas g√©n√©r√©s.
        if not CGI_EMBEDDINGS_AVAILABLE:
            return []
        
        embeddings = load_embeddings()
        if not embeddings:
            return []
        
        similar_articles_raw = search_similar_articles(query, embeddings, top_k=top_k*2)
        
        # Filtrer STRICTEMENT les articles CGI pertinents et officiels
        filtered_articles = []
        for article_tuple in similar_articles_raw:
            if isinstance(article_tuple, tuple) and len(article_tuple) == 2:
                article_data, similarity_score = article_tuple
                
                # VALIDATION STRICTE : Doit √™tre du CGI ET avoir une bonne similarit√©
                if (similarity_score >= 0.65 and 
                    validate_official_source({'type': 'CGI', 'path': 'cgi_chunks'})):
                    filtered_articles.append(article_data)
            else:
                # G√©rer le cas o√π le format n'est pas celui attendu
                pass 
        
        # Formater pour la compatibilit√© avec le reste du code
        results = []
        for article_data in filtered_articles[:top_k]: 
            results.append({
                'content': article_data.get('text', ''),
                'source': f"CGI Article {article_data.get('article_number', 'N/A')}",
                'article_id': article_data.get('article_number', 'N/A')
            })
        
        return results
    except Exception as e:
        print(f"Erreur recherche CGI: {e}")
        return []

def search_similar_bofip_chunks_filtered(query: str, top_k: int = 3) -> List[Dict]:
    """Recherche les chunks BOFiP avec validation stricte."""
    try:
        # Ces imports peuvent √©chouer en environnement de test ou si les embeddings ne sont pas g√©n√©r√©s.
        if not BOFIP_EMBEDDINGS_AVAILABLE:
            return []
        
        bofip_chunks_raw = search_similar_bofip_chunks(query, top_k=top_k*2)
        
        # Filtrer STRICTEMENT les chunks BOFiP officiels
        filtered_chunks = []
        for chunk in bofip_chunks_raw:
            if (chunk.get('similarity', 0) >= 0.6 and
                validate_official_source({'type': 'BOFIP', 'path': 'bofip_chunks'})):
                
                filtered_chunks.append({
                    'text': chunk.get('text', ''),
                    'file': chunk.get('file', ''),
                    'similarity': chunk.get('similarity', 0),
                    'reference': f"BOFiP - {chunk.get('file', 'N/A')}"
                })
        
        return filtered_chunks[:top_k]
    except Exception as e:
        print(f"Erreur recherche BOFiP: {e}")
        return []

def search_swiss_fiscal_knowledge(query: str, top_k: int = 3) -> Dict:
    """Recherche dans la base de connaissances fiscales suisses."""
    try:
        if not SWISS_RAG_AVAILABLE or not swiss_rag:
            return {}
        
        # V√©rifier si c'est une question fiscale suisse
        if not swiss_rag.is_swiss_fiscal_question(query):
            return {}
        
        # Rechercher dans la base de connaissances suisse
        result = swiss_rag.answer_swiss_fiscal_question(query, top_k=top_k)
        
        # Valider la qualit√© de la r√©ponse
        if result.get('confidence', 0) >= 0.3:
            return result
        
        return {}
    except Exception as e:
        print(f"Erreur recherche fiscalit√© suisse: {e}")
        return {}

def is_swiss_fiscal_question(query: str) -> bool:
    """D√©termine si une question concerne la fiscalit√© suisse."""
    swiss_keywords = [
        'suisse', 'swiss', 'canton', 'cantonal', 'communal',
        'pilier 3a', 'lpp', 'avs', 'ai', 'afc', 'chf',
        'gen√®ve', 'zurich', 'vaud', 'valais', 'berne',
        'f√©d√©ral', 'conf√©d√©ration', 'imp√¥t √† la source',
        'pr√©voyance', 'cotisations sociales', 'frontalier'
    ]
    
    query_lower = query.lower()
    return any(keyword in query_lower for keyword in swiss_keywords)

def create_prompt(query: str, cgi_articles: List[Dict], bofip_chunks: List[Dict], swiss_result: Dict = None, conversation_history: List[Dict] = None) -> str:
    """Cr√©e un prompt bas√© EXCLUSIVEMENT sur les sources officielles."""
    
    # Construction du contexte officiel UNIQUEMENT
    context = ""
    
    if cgi_articles:
        context += "=== CODE G√âN√âRAL DES IMP√îTS (CGI) - SOURCES OFFICIELLES ===\n\n"
        for article in cgi_articles:
            context += f"{article['source']}:\n{article['content']}\n\n"
        context += "="*60 + "\n\n"
    
    if bofip_chunks:
        context += "=== BULLETIN OFFICIEL DES FINANCES PUBLIQUES (BOFiP) - SOURCES OFFICIELLES ===\n\n"
        for chunk in bofip_chunks:
            context += f"{chunk['reference']}:\n{chunk['text'][:1500]}\n\n"
        context += "="*60 + "\n\n"
    
    if swiss_result and swiss_result.get('answer'):
        context += "=== FISCALIT√â SUISSE - SOURCES OFFICIELLES ===\n\n"
        context += f"R√©ponse sp√©cialis√©e fiscalit√© suisse:\n{swiss_result['answer']}\n\n"
        if swiss_result.get('sources'):
            context += "Sources consult√©es:\n"
            for source in swiss_result['sources']:
                context += f"- {source.get('chunk_id', 'N/A')} (similarit√©: {source.get('similarity', 0):.3f})\n"
        context += "="*60 + "\n\n"
    
    if not context:
        context = "AUCUNE SOURCE OFFICIELLE TROUV√âE pour cette question.\n\n"
    
    # Syst√®me de prompt adapt√©
    if swiss_result and swiss_result.get('answer'):
        system_prompt = """Tu es Francis, assistant fiscal expert sp√©cialis√© en fiscalit√© fran√ßaise ET suisse.

R√àGLES IMP√âRATIVES :
1. Tu te bases EXCLUSIVEMENT sur le CGI, le BOFiP et les sources officielles fiscales suisses
2. Pour la fiscalit√© fran√ßaise : cite l'article du CGI ou la r√©f√©rence BOFiP exacte
3. Pour la fiscalit√© suisse : utilise les informations sp√©cialis√©es fournies
4. Si l'information n'est pas dans les sources fournies, dis clairement : "Cette information n'est pas disponible dans les sources officielles consult√©es"
5. INTERDICTION ABSOLUE d'utiliser d'autres sources ou tes connaissances g√©n√©rales
6. R√©ponds en fran√ßais, de mani√®re claire et pr√©cise

SOURCES OFFICIELLES DISPONIBLES :
"""
    else:
        system_prompt = """Tu es Francis, assistant fiscal expert qui se base EXCLUSIVEMENT sur le Code G√©n√©ral des Imp√¥ts (CGI) et le Bulletin Officiel des Finances Publiques (BOFiP).

R√àGLES IMP√âRATIVES :
1. Tu ne peux r√©pondre qu'en te basant sur le CGI et le BOFiP fournis ci-dessous
2. Cite OBLIGATOIREMENT l'article du CGI ou la r√©f√©rence BOFiP exacte
3. Si l'information n'est pas dans les sources fournies, dis clairement : "Cette information n'est pas disponible dans les sources officielles consult√©es"
4. INTERDICTION ABSOLUE d'utiliser d'autres sources ou tes connaissances g√©n√©rales
5. R√©ponds en fran√ßais, de mani√®re claire et pr√©cise

SOURCES OFFICIELLES DISPONIBLES :
"""

    # Historique de conversation (limit√©)
    history_context = ""
    if conversation_history:
        recent_history = conversation_history[-2:]  # 2 derniers √©changes max
        for msg in recent_history:
            if msg.get('role') and msg.get('content'):
                history_context += f"{msg['role'].upper()}: {msg['content'][:200]}...\n"
    
    if history_context:
        history_context = f"\n=== CONTEXTE DE CONVERSATION ===\n{history_context}\n"
    
    # Prompt final
    final_prompt = f"""{system_prompt}

{context}

{history_context}

QUESTION UTILISATEUR : {query}

R√âPONSE (bas√©e UNIQUEMENT sur les sources officielles ci-dessus) :
"""
    
    return final_prompt

from pii_sanitizer import sanitize_text

def get_fiscal_response(query: str, conversation_history: List[Dict] = None) -> Tuple[str, List[str], float]:
    """Obtient une r√©ponse de l'assistant fiscal bas√©e EXCLUSIVEMENT sur les sources officielles."""
    all_sources_for_api = []
    confidence_score = 0.5 

    try:
        if not client:
            return "Erreur: Client Mistral non configur√©", [], 0.0
        
        # V√©rifier si c'est une question fiscale suisse
        swiss_result = {}
        if is_swiss_fiscal_question(query):
            swiss_result = search_swiss_fiscal_knowledge(query, top_k=3)
            
            # Si on a une r√©ponse suisse de bonne qualit√©, on peut l'utiliser directement
            if swiss_result and swiss_result.get('confidence', 0) >= 0.7:
                sources = [f"Fiscalit√© Suisse - {source.get('chunk_id', 'N/A')}" 
                          for source in swiss_result.get('sources', [])]
                return swiss_result['answer'], sources, swiss_result['confidence']
        
        # Recherche STRICTE des articles CGI officiels
        similar_cgi_articles = search_similar_cgi_articles(query, top_k=3)
        
        # Recherche STRICTE des BOFiP officiels
        similar_bofip_chunks = search_similar_bofip_chunks_filtered(query, top_k=3)
        
        # V√©rification qu'on a au moins une source officielle
        if not similar_cgi_articles and not similar_bofip_chunks and not swiss_result:
            return ("Je ne trouve aucune information dans les sources officielles (CGI, BOFiP et fiscalit√© suisse) "
                   "pour r√©pondre √† votre question. Pourriez-vous reformuler ou √™tre plus sp√©cifique ?"), [], 0.3
        
                # --- Sanitize content before sending to LLM ---
        sanitized_query = sanitize_text(query)
        sanitized_history = None
        if conversation_history:
            sanitized_history = []
            for m in conversation_history[-10:]:
                sanitized_history.append({
                    "role": m.get("role", "user"),
                    "content": sanitize_text(m.get("content", ""))
                })

        # Cr√©ation du prompt avec le contexte RAG officiel UNIQUEMENT (PII prot√©g√©es)
        prompt = create_prompt(sanitized_query, similar_cgi_articles, similar_bofip_chunks, swiss_result, sanitized_history)
        
        # Appel √† Mistral pour chat/RAG (besoin embeddings)
        messages = [ChatMessage(role="user", content=prompt)]
        response = client.chat(
            model="mistral-large-latest",
            messages=messages,
            temperature=0.15,  # Tr√®s bas pour privil√©gier la pr√©cision
            max_tokens=1000
        )
        
        answer = response.choices[0].message.content.strip()
        
        # Extraction des sources OFFICIELLES uniquement
        for article in similar_cgi_articles:
            source_name = f"Article {article.get('article_id', 'N/A')} du CGI"
            all_sources_for_api.append(source_name)
        
        for chunk in similar_bofip_chunks:
            source_name = chunk.get('reference', 'BOFiP N/A')
            all_sources_for_api.append(source_name)
        
        # Ajouter disclaimer sur les sources officielles
        if all_sources_for_api:
            disclaimer = f"\n\nüìö Sources officielles consult√©es : {', '.join(all_sources_for_api[:3])}"
            if len(all_sources_for_api) > 3:
                disclaimer += f" et {len(all_sources_for_api) - 3} autres"
            answer += disclaimer
        
        # Calcul du score de confiance bas√© UNIQUEMENT sur les sources officielles
        confidence_score = min(0.95, len(all_sources_for_api) / 4.0) if all_sources_for_api else 0.3
        
        return answer, all_sources_for_api, confidence_score
    
    except Exception as e:
        print(f"Erreur lors du traitement de la question : {str(e)}")
        return ("Erreur lors de la consultation des sources officielles. "
               "Veuillez r√©essayer."), [], 0.0


def get_francis_vocal_response(query: str, conversation_history: List[Dict] = None) -> Tuple[str, List[str], float]:
    """
    Fonction sp√©cifique pour Francis vocal - utilise Groq (gratuit) pour l'extraction d'infos client.
    Pas besoin de RAG/embeddings, juste de l'extraction s√©mantique pure.
    """
    if not groq_client:
        # Fallback vers Mistral si Groq indisponible
        if not client:
            return ("Service IA non disponible. Configurez GROQ_API_KEY ou MISTRAL_API_KEY.", [], 0.0)
        print("‚ö†Ô∏è Groq indisponible, fallback Mistral pour Francis vocal")
        # Utiliser la fonction normale avec Mistral
        return get_fiscal_response(query, conversation_history)
    
    try:
        # Sanitize l'input pour Francis
        sanitized_query = sanitize_text(query)
        sanitized_history = None
        if conversation_history:
            sanitized_history = []
            for m in conversation_history[-5:]:  # Limite historique pour vocal
                sanitized_history.append({
                    "role": m.get("role", "user"),
                    "content": sanitize_text(m.get("content", ""))
                })
        
        # Construction des messages pour Groq (OpenAI-compatible)
        messages = [{"role": "user", "content": sanitized_query}]
        
        # Ajouter l'historique si disponible
        if sanitized_history:
            # Ins√©rer l'historique avant la question actuelle
            for msg in sanitized_history:
                messages.insert(-1, msg)
        
        # Appel √† Groq pour Francis vocal
        response = groq_client.chat.completions.create(
            model="llama3-8b-8192",  # Mod√®le Groq gratuit et performant
            messages=messages,
            temperature=0.15,  # Bas pour pr√©cision extraction
            max_tokens=1024
        )
        
        answer = response.choices[0].message.content.strip()
        
        # Sources pour Francis vocal (pas de RAG)
        sources = ["Francis IA - Extraction vocale", "Groq Llama3-8B"]
        confidence = 0.8  # Confiance √©lev√©e pour extraction pure
        
        return answer, sources, confidence
        
    except Exception as e:
        print(f"Erreur Francis vocal (Groq): {str(e)}")
        # Tentative de fallback vers Mistral
        if client:
            print("üîÑ Fallback vers Mistral pour Francis vocal")
            return get_fiscal_response(query, conversation_history)
        return ("Erreur lors de l'extraction vocale Francis. Veuillez r√©essayer.", [], 0.0)

def get_fiscal_response_stream(query: str, conversation_history: List[Dict] = None):
    """Version streaming qui utilise EXCLUSIVEMENT les sources officielles."""
    try:
        # Envoyer le statut initial
        yield json.dumps({
            "type": "status",
            "message": "üîç Recherche dans les sources officielles (CGI, BOFiP et fiscalit√© suisse)...",
            "progress": 10
        }) + "\n"
        
        if not client:
            yield json.dumps({
                "type": "error",
                "message": "Erreur: Client Mistral non configur√©"
            }) + "\n"
            return

        # Variables pour les sources OFFICIELLES uniquement
        similar_cgi_articles = []
        similar_bofip_chunks = []
        swiss_result = {}
        all_sources = []
        confidence_score = 0.5
        
        # === RECHERCHE FISCALIT√â SUISSE ===
        if is_swiss_fiscal_question(query):
            yield json.dumps({
                "type": "status",
                "message": "üá®üá≠ Consultation de la base fiscale suisse...",
                "progress": 15
            }) + "\n"
            
            try:
                swiss_result = search_swiss_fiscal_knowledge(query, top_k=3)
                
                # Si on a une r√©ponse suisse de tr√®s bonne qualit√©, on peut l'utiliser directement
                if swiss_result and swiss_result.get('confidence', 0) >= 0.8:
                    sources = [f"Fiscalit√© Suisse - {source.get('chunk_id', 'N/A')}" 
                              for source in swiss_result.get('sources', [])]
                    
                    yield json.dumps({
                        "type": "complete",
                        "content": swiss_result['answer'],
                        "sources": sources,
                        "confidence": swiss_result['confidence'],
                        "progress": 100
                    }) + "\n"
                    return
                    
            except Exception as e:
                print(f"Erreur fiscalit√© suisse: {e}")

        # === RECHERCHE CGI AVEC TIMEOUT ===
        yield json.dumps({
            "type": "status", 
            "message": "üìñ Consultation du Code G√©n√©ral des Imp√¥ts...",
            "progress": 25
        }) + "\n"
        
        try:
            def timeout_handler(signum, frame):
                raise TimeoutError("Search timeout")
            
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(4)  # 4 secondes pour CGI
            
            similar_cgi_articles = search_similar_cgi_articles(query, top_k=3)
            signal.alarm(0)
            
            if similar_cgi_articles:
                all_sources.extend([art.get('source', 'CGI inconnu') for art in similar_cgi_articles])
                confidence_score = max(confidence_score, 0.8)
                
        except (TimeoutError, Exception) as e:
            print(f"Timeout/Erreur CGI: {e}")

        # === RECHERCHE BOFIP AVEC TIMEOUT ===
        yield json.dumps({
            "type": "status",
            "message": "üìö Consultation du Bulletin Officiel des Finances Publiques...",
            "progress": 45
        }) + "\n"
        
        try:
            signal.signal(signal.SIGALRM, timeout_handler)
            signal.alarm(4)  # 4 secondes pour BOFiP
            
            similar_bofip_chunks = search_similar_bofip_chunks_filtered(query, top_k=3)
            signal.alarm(0)
            
            if similar_bofip_chunks:
                all_sources.extend([chunk.get('reference', 'BOFiP inconnu') for chunk in similar_bofip_chunks])
                confidence_score = max(confidence_score, 0.8)
                
        except (TimeoutError, Exception) as e:
            print(f"Timeout/Erreur BOFiP: {e}")

        # V√©rification qu'on a des sources officielles
        if not similar_cgi_articles and not similar_bofip_chunks and not swiss_result:
            yield json.dumps({
                "type": "complete",
                "content": "Je ne trouve aucune information dans les sources officielles (CGI, BOFiP et fiscalit√© suisse) pour r√©pondre √† votre question. Pourriez-vous reformuler ou √™tre plus sp√©cifique ?",
                "sources": ["Sources officielles consult√©es mais aucun r√©sultat pertinent"],
                "confidence": 0.3,
                "progress": 100
            }) + "\n"
            return

        # === PR√âPARATION DU PROMPT OFFICIEL ===
        yield json.dumps({
            "type": "status",
            "message": "ü§ñ Francis analyse les textes officiels...",
            "progress": 65
        }) + "\n"

        # Prompt bas√© UNIQUEMENT sur les sources officielles
        prompt = create_prompt(query, similar_cgi_articles, similar_bofip_chunks, swiss_result, conversation_history)

        yield json.dumps({
            "type": "status",
            "message": "‚úçÔ∏è G√©n√©ration de la r√©ponse bas√©e sur les sources officielles...",
            "progress": 80
        }) + "\n"

        # === G√âN√âRATION DE LA R√âPONSE ===
        try:
            signal.alarm(10)  # 10 secondes pour Mistral
            
            messages = [ChatMessage(role="user", content=prompt)]
            response = client.chat(
                model="mistral-large-latest",
                messages=messages,
                temperature=0.15,
                max_tokens=1000
            )
            
            signal.alarm(0)
            answer = response.choices[0].message.content.strip()
            
            # Ajouter disclaimer sur sources officielles
            if all_sources:
                disclaimer = f"\n\nüìö Sources officielles : {', '.join(all_sources[:3])}"
                if len(all_sources) > 3:
                    disclaimer += f" et {len(all_sources) - 3} autres"
                answer += disclaimer
            
            # Finaliser avec les sources officielles
            yield json.dumps({
                "type": "complete",
                "content": answer,
                "sources": all_sources,
                "confidence": confidence_score,
                "progress": 100
            }) + "\n"
            
        except (TimeoutError, Exception) as e:
            print(f"Erreur g√©n√©ration: {e}")
            yield json.dumps({
                "type": "error",
                "message": f"Erreur lors de la g√©n√©ration de la r√©ponse bas√©e sur les sources officielles : {str(e)[:100]}"
            }) + "\n"
            
    except Exception as e:
        yield json.dumps({
            "type": "error",
            "message": f"Erreur g√©n√©rale : {str(e)[:100]}"
        }) + "\n"

def main():
    print("Assistant Fiscal Expert (tapez 'quit' pour quitter)")
    print("=" * 50)
    
    while True:
        query = input("\nVotre question : ").strip()
        if query.lower() == 'quit':
            break
            
        try:
            # La fonction main est surtout pour le test en CLI, 
            # la structure de retour de get_fiscal_response a chang√©.
            answer, sources, confidence = get_fiscal_response(query)
            print("\nR√©ponse de Francis:")
            print("-" * 50)
            print(answer)
            print("-" * 50)
            if sources:
                print(f"Sources potentielles: {', '.join(sources)}")
            print(f"Confiance (estimation): {confidence:.2f}")
            print("-" * 50)
        except Exception as e:
            print(f"Erreur : {str(e)}")
        
        # time.sleep(1) # D√©lai entre les requ√™tes, peut-√™tre moins n√©cessaire en CLI

if __name__ == "__main__":
    if not MISTRAL_API_KEY:
        exit(1)
    if not client:
        exit(1)
    main() 