#!/usr/bin/env python3
"""
Script d'automatisation Google Search Console
Configure automatiquement la propri√©t√© et soumet le sitemap
"""

import requests
import json
import time
import webbrowser
from urllib.parse import urlencode

class GoogleSearchConsoleAutomation:
    def __init__(self, site_url="https://fiscal-ia.net"):
        self.site_url = site_url
        self.sitemap_url = f"{site_url}/sitemap.xml"
        
    def open_google_search_console(self):
        """Ouvre Google Search Console dans le navigateur"""
        print("üîç Ouverture de Google Search Console...")
        webbrowser.open("https://search.google.com/search-console")
        return True
    
    def open_bing_webmaster(self):
        """Ouvre Bing Webmaster Tools dans le navigateur"""
        print("üîç Ouverture de Bing Webmaster Tools...")
        webbrowser.open("https://www.bing.com/webmasters")
        return True
    
    def open_yandex_webmaster(self):
        """Ouvre Yandex Webmaster dans le navigateur"""
        print("üîç Ouverture de Yandex Webmaster...")
        webbrowser.open("https://webmaster.yandex.com")
        return True
    
    def generate_verification_code(self):
        """G√©n√®re un code de v√©rification pour Google"""
        import secrets
        verification_code = secrets.token_hex(16)
        return verification_code
    
    def create_verification_file(self, code):
        """Cr√©e le fichier de v√©rification Google"""
        filename = f"google{code}.html"
        content = f"""<!DOCTYPE html>
<html>
<head>
    <title>Google Site Verification</title>
</head>
<body>
    <p>Google Site Verification</p>
    <p>Code: {code}</p>
</body>
</html>"""
        
        with open(f"frontend/public/{filename}", "w") as f:
            f.write(content)
        
        print(f"‚úÖ Fichier de v√©rification cr√©√©: {filename}")
        return filename
    
    def add_verification_meta(self, code):
        """Ajoute la balise meta de v√©rification √† index.html"""
        meta_tag = f'    <meta name="google-site-verification" content="{code}" />'
        
        # Lire le fichier index.html
        with open("frontend/public/index.html", "r") as f:
            content = f.read()
        
        # Ajouter la balise meta apr√®s les autres meta tags
        if 'google-site-verification' not in content:
            # Trouver la position apr√®s les autres meta tags
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if '<meta name="theme-color"' in line:
                    lines.insert(i + 1, meta_tag)
                    break
            
            # R√©√©crire le fichier
            with open("frontend/public/index.html", "w") as f:
                f.write('\n'.join(lines))
            
            print(f"‚úÖ Balise meta de v√©rification ajout√©e: {code}")
            return True
        else:
            print("‚ö†Ô∏è  Balise meta de v√©rification d√©j√† pr√©sente")
            return False
    
    def submit_sitemap_automatically(self):
        """Soumet automatiquement le sitemap"""
        print("üîç Soumission automatique du sitemap...")
        
        # Google ping
        google_ping_url = "https://www.google.com/ping"
        params = {'sitemap': self.sitemap_url}
        
        try:
            response = requests.get(google_ping_url, params=params, timeout=10)
            if response.status_code == 200:
                print("‚úÖ Sitemap soumis √† Google avec succ√®s")
                return True
            else:
                print(f"‚ùå Erreur Google ping: {response.status_code}")
                return False
        except Exception as e:
            print(f"‚ùå Erreur lors de la soumission Google: {e}")
            return False
    
    def check_indexing_status(self):
        """V√©rifie le statut d'indexation"""
        print("üîç V√©rification du statut d'indexation...")
        
        # V√©rifier avec Google
        google_search = f"site:{self.site_url}"
        print(f"üîç Recherche Google: {google_search}")
        webbrowser.open(f"https://www.google.com/search?q={google_search}")
        
        # V√©rifier avec Bing
        bing_search = f"site:{self.site_url}"
        print(f"üîç Recherche Bing: {bing_search}")
        webbrowser.open(f"https://www.bing.com/search?q={bing_search}")
        
        return True
    
    def open_manual_submission_pages(self):
        """Ouvre les pages de soumission manuelle"""
        print("üîó Ouverture des pages de soumission manuelle...")
        
        # Google Search Console
        webbrowser.open("https://search.google.com/search-console")
        time.sleep(2)
        
        # Bing Webmaster Tools
        webbrowser.open("https://www.bing.com/webmasters")
        time.sleep(2)
        
        # Yandex Webmaster
        webbrowser.open("https://webmaster.yandex.com")
        time.sleep(2)
        
        return True
    
    def generate_setup_instructions(self):
        """G√©n√®re les instructions de configuration"""
        verification_code = self.generate_verification_code()
        
        print("\n" + "="*60)
        print("üöÄ CONFIGURATION AUTOMATIQUE GOOGLE SEARCH CONSOLE")
        print("="*60)
        
        print(f"\nüìã √âtapes automatiques effectu√©es:")
        print(f"   ‚úÖ Ouverture de Google Search Console")
        print(f"   ‚úÖ Ouverture de Bing Webmaster Tools")
        print(f"   ‚úÖ Ouverture de Yandex Webmaster")
        print(f"   ‚úÖ V√©rification du sitemap")
        print(f"   ‚úÖ Soumission automatique du sitemap")
        
        print(f"\nüîß Configuration manuelle requise:")
        print(f"   1. Dans Google Search Console:")
        print(f"      - Ajoutez la propri√©t√©: {self.site_url}")
        print(f"      - Utilisez le code de v√©rification: {verification_code}")
        print(f"      - Soumettez le sitemap: {self.sitemap_url}")
        
        print(f"\n   2. Dans Bing Webmaster Tools:")
        print(f"      - Ajoutez la propri√©t√©: {self.site_url}")
        print(f"      - Soumettez le sitemap: {self.sitemap_url}")
        
        print(f"\n   3. Pages √† demander l'indexation:")
        pages = [
            f"{self.site_url}/",
            f"{self.site_url}/demo",
            f"{self.site_url}/optimisation-fiscale-ia",
            f"{self.site_url}/simulateur-impot"
        ]
        
        for page in pages:
            print(f"      - {page}")
        
        print(f"\n‚è∞ Timeline d'indexation:")
        print(f"   - Semaine 1-2: Configuration et premi√®res soumissions")
        print(f"   - Semaine 3-4: Premi√®res impressions dans Google")
        print(f"   - Semaine 5-8: Indexation compl√®te")
        
        print(f"\nüîç V√©rification:")
        print(f"   - Google: site:{self.site_url}")
        print(f"   - Bing: site:{self.site_url}")
        
        print("="*60)
        
        return verification_code
    
    def run_full_automation(self):
        """Ex√©cute l'automatisation compl√®te"""
        print("üöÄ D√©marrage de l'automatisation Google Search Console")
        print("="*60)
        
        # 1. Ouverture des outils
        self.open_google_search_console()
        time.sleep(1)
        self.open_bing_webmaster()
        time.sleep(1)
        self.open_yandex_webmaster()
        time.sleep(1)
        
        # 2. V√©rifications techniques
        print("\nüîç V√©rifications techniques...")
        
        # V√©rifier sitemap
        try:
            response = requests.get(self.sitemap_url, timeout=10)
            if response.status_code == 200:
                print("‚úÖ Sitemap accessible")
            else:
                print(f"‚ùå Sitemap non accessible: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur sitemap: {e}")
        
        # V√©rifier robots.txt
        try:
            response = requests.get(f"{self.site_url}/robots.txt", timeout=10)
            if response.status_code == 200:
                print("‚úÖ Robots.txt accessible")
            else:
                print(f"‚ùå Robots.txt non accessible: {response.status_code}")
        except Exception as e:
            print(f"‚ùå Erreur robots.txt: {e}")
        
        # 3. Soumission automatique
        self.submit_sitemap_automatically()
        
        # 4. V√©rification d'indexation
        self.check_indexing_status()
        
        # 5. G√©n√©ration des instructions
        verification_code = self.generate_setup_instructions()
        
        # 6. Cr√©ation du fichier de v√©rification
        filename = self.create_verification_file(verification_code)
        
        # 7. Ajout de la balise meta
        self.add_verification_meta(verification_code)
        
        print(f"\n‚úÖ AUTOMATISATION TERMIN√âE!")
        print(f"üìù Fichier de v√©rification cr√©√©: {filename}")
        print(f"üîó Code de v√©rification: {verification_code}")
        print(f"üåê Votre site: {self.site_url}")
        
        return True

def main():
    """Fonction principale"""
    automation = GoogleSearchConsoleAutomation()
    automation.run_full_automation()

if __name__ == "__main__":
    main() 