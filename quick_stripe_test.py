#!/usr/bin/env python3
"""
Test rapide de la configuration Stripe avec la cl√© fournie
"""

import os
import sys
import stripe
import requests

# Configuration avec la cl√© Stripe
STRIPE_SECRET_KEY = "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"

def test_stripe_connection():
    """Test de connexion √† Stripe"""
    print("üîç Test de connexion √† Stripe...")
    
    try:
        stripe.api_key = STRIPE_SECRET_KEY
        
        # Test de r√©cup√©ration des prix
        prices = stripe.Price.list(limit=10)
        print(f"‚úÖ Connexion r√©ussie ! {len(prices.data)} prix trouv√©s")
        
        print("\nüìã Prix disponibles :")
        for price in prices.data:
            if hasattr(price, 'recurring') and price.recurring:
                print(f"   - {price.id}: {price.unit_amount/100}‚Ç¨/{price.recurring.interval}")
            else:
                print(f"   - {price.id}: {price.unit_amount/100}‚Ç¨ (one-time)")
        
        return True
        
    except stripe.error.AuthenticationError:
        print("‚ùå Erreur d'authentification - V√©rifiez la cl√©")
        return False
    except Exception as e:
        print(f"‚ùå Erreur : {e}")
        return False

def test_backend_with_stripe():
    """Test du backend avec la cl√© Stripe"""
    print("\nüîç Test du backend avec Stripe...")
    
    # Configuration des variables pour le test
    os.environ["STRIPE_SECRET_KEY"] = STRIPE_SECRET_KEY
    os.environ["STRIPE_ENDPOINT_SECRET"] = "whsec_2bMwLAHWNeg4qOnU5p17lYBceqAeSkUy"
    
    base_url = "https://fiscal-ia-backend-production.up.railway.app"
    
    try:
        # Test de sant√©
        response = requests.get(f"{base_url}/health", timeout=10)
        if response.status_code == 200:
            print("‚úÖ Backend accessible")
        else:
            print(f"‚ùå Backend retourne {response.status_code}")
            return False
        
        # Test de cr√©ation de session
        response = requests.post(
            f"{base_url}/api/create-checkout-session",
            json={
                "priceId": "price_1QVVfZGZEuLRLMp4FZd4eqCH",
                "successUrl": "https://fiscal-ia.net/success",
                "cancelUrl": "https://fiscal-ia.net/pricing"
            },
            timeout=10
        )
        
        if response.status_code == 200:
            data = response.json()
            if "url" in data and data["url"].startswith("https://checkout.stripe.com"):
                print("‚úÖ Endpoint de session fonctionnel")
                print(f"   URL de checkout : {data['url']}")
                return True
            else:
                print("‚ùå R√©ponse invalide")
                return False
        else:
            print(f"‚ùå Endpoint retourne {response.status_code}")
            print(f"   R√©ponse : {response.text}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur backend : {e}")
        return False

def test_configured_prices():
    """Test des prix configur√©s"""
    print("\nüîç Test des prix configur√©s...")
    
    configured_prices = [
        "price_1QVVfZGZEuLRLMp4FZd4eqCH",  # Mensuel
        "price_1QVVh0GZEuLRLMp4qwjkFxrE"   # Annuel
    ]
    
    try:
        stripe.api_key = STRIPE_SECRET_KEY
        
        for price_id in configured_prices:
            try:
                price = stripe.Price.retrieve(price_id)
                print(f"‚úÖ Prix {price_id} trouv√© : {price.unit_amount/100}‚Ç¨/{price.recurring.interval}")
            except stripe.error.InvalidRequestError:
                print(f"‚ùå Prix {price_id} introuvable")
                return False
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur v√©rification prix : {e}")
        return False

def main():
    """Test principal"""
    print("üöÄ Test rapide de la configuration Stripe")
    print("=" * 50)
    
    tests = [
        ("Connexion Stripe", test_stripe_connection),
        ("Prix configur√©s", test_configured_prices),
        ("Backend avec Stripe", test_backend_with_stripe)
    ]
    
    results = []
    for test_name, test_func in tests:
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå Erreur test '{test_name}' : {e}")
            results.append((test_name, False))
    
    # R√©sum√©
    print("\n" + "=" * 50)
    print("üìä R√âSULTATS")
    print("=" * 50)
    
    passed = sum(1 for _, result in results if result)
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ PASS" if result else "‚ùå FAIL"
        print(f"{status} - {test_name}")
    
    print(f"\nüéØ {passed}/{total} tests r√©ussis")
    
    if passed == total:
        print("üéâ Configuration Stripe compl√®te et fonctionnelle !")
        print("\nüìù Prochaines √©tapes :")
        print("   1. Testez un paiement r√©el")
        print("   2. Configurez les webhooks")
        print("   3. Surveillez les m√©triques")
    else:
        print("‚ö†Ô∏è  Certains tests ont √©chou√©")
        print("   V√©rifiez la configuration selon le guide STRIPE_SETUP_GUIDE.md")
    
    return passed == total

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 